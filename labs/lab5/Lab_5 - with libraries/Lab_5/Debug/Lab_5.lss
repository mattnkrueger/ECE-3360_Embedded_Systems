
Lab_5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000134  00800100  00001ad2  00001b66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ad2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800234  00800234  00001c9a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001c9a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001cf8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00001d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012ca  00000000  00000000  00001e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a7  00000000  00000000  000030f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009d5  00000000  00000000  00003a99  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c8  00000000  00000000  00004470  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ce  00000000  00000000  00004738  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c39  00000000  00000000  00004d06  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  0000593f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__ctors_end>
       4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
       8:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
       c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      10:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      14:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      18:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      1c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      20:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      24:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      28:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      2c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      30:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      34:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      38:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      3c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      40:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      44:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      48:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      4c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      50:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      54:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      58:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      5c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      60:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      64:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	6e 61       	ori	r22, 0x1E	; 30
      6a:	6e 00       	.word	0x006e	; ????

0000006c <__c.2332>:
      6c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      7c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      8c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      9c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ac:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      bc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      cc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      dc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      ec:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      fc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     10c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     11c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     12c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     13c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     14c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     15c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000016a <pstr_nan>:
     16a:	4e 41 4e                                            NAN

0000016d <pstr_inity>:
     16d:	49 4e 49 54 59                                      INITY

00000172 <pstr_inf>:
     172:	49 4e 46                                            INF

00000175 <pwr_m10>:
     175:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     185:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000018d <pwr_p10>:
     18d:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     19d:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000001a6 <__ctors_end>:
     1a6:	11 24       	eor	r1, r1
     1a8:	1f be       	out	0x3f, r1	; 63
     1aa:	cf ef       	ldi	r28, 0xFF	; 255
     1ac:	d8 e0       	ldi	r29, 0x08	; 8
     1ae:	de bf       	out	0x3e, r29	; 62
     1b0:	cd bf       	out	0x3d, r28	; 61

000001b2 <__do_copy_data>:
     1b2:	12 e0       	ldi	r17, 0x02	; 2
     1b4:	a0 e0       	ldi	r26, 0x00	; 0
     1b6:	b1 e0       	ldi	r27, 0x01	; 1
     1b8:	e2 ed       	ldi	r30, 0xD2	; 210
     1ba:	fa e1       	ldi	r31, 0x1A	; 26
     1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <__do_copy_data+0x10>
     1be:	05 90       	lpm	r0, Z+
     1c0:	0d 92       	st	X+, r0
     1c2:	a4 33       	cpi	r26, 0x34	; 52
     1c4:	b1 07       	cpc	r27, r17
     1c6:	d9 f7       	brne	.-10     	; 0x1be <__do_copy_data+0xc>

000001c8 <__do_clear_bss>:
     1c8:	22 e0       	ldi	r18, 0x02	; 2
     1ca:	a4 e3       	ldi	r26, 0x34	; 52
     1cc:	b2 e0       	ldi	r27, 0x02	; 2
     1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <.do_clear_bss_start>

000001d0 <.do_clear_bss_loop>:
     1d0:	1d 92       	st	X+, r1

000001d2 <.do_clear_bss_start>:
     1d2:	a6 33       	cpi	r26, 0x36	; 54
     1d4:	b2 07       	cpc	r27, r18
     1d6:	e1 f7       	brne	.-8      	; 0x1d0 <.do_clear_bss_loop>
     1d8:	0e 94 98 03 	call	0x730	; 0x730 <main>
     1dc:	0c 94 67 0d 	jmp	0x1ace	; 0x1ace <_exit>

000001e0 <__bad_interrupt>:
     1e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e4 <USART0_Init>:
//Function that converts the DAC value to an integer from a float
int DAC_voltage_conversion(float voltage)									//A value from 0 - 255 is needed to set the DAC
{																			//Uses a reference voltage of 5
	int return_voltage = voltage * 256.0 / 5.0 + 0.5;						//Add 0.5 for correct rounding		 														
	return return_voltage;													//Return integer voltage value
}
     1e4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     1e8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     1ec:	88 e1       	ldi	r24, 0x18	; 24
     1ee:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     1f2:	86 e0       	ldi	r24, 0x06	; 6
     1f4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     1f8:	08 95       	ret

000001fa <USART0_Transmit>:
     1fa:	e0 ec       	ldi	r30, 0xC0	; 192
     1fc:	f0 e0       	ldi	r31, 0x00	; 0
     1fe:	90 81       	ld	r25, Z
     200:	95 ff       	sbrs	r25, 5
     202:	fd cf       	rjmp	.-6      	; 0x1fe <USART0_Transmit+0x4>
     204:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     208:	08 95       	ret

0000020a <USART0_SendString>:
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
     20e:	ec 01       	movw	r28, r24
     210:	88 81       	ld	r24, Y
     212:	88 23       	and	r24, r24
     214:	31 f0       	breq	.+12     	; 0x222 <USART0_SendString+0x18>
     216:	21 96       	adiw	r28, 0x01	; 1
     218:	0e 94 fd 00 	call	0x1fa	; 0x1fa <USART0_Transmit>
     21c:	89 91       	ld	r24, Y+
     21e:	81 11       	cpse	r24, r1
     220:	fb cf       	rjmp	.-10     	; 0x218 <USART0_SendString+0xe>
     222:	df 91       	pop	r29
     224:	cf 91       	pop	r28
     226:	08 95       	ret

00000228 <ADC_init>:
     228:	80 e4       	ldi	r24, 0x40	; 64
     22a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     22e:	ea e7       	ldi	r30, 0x7A	; 122
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	80 81       	ld	r24, Z
     234:	87 60       	ori	r24, 0x07	; 7
     236:	80 83       	st	Z, r24
     238:	80 81       	ld	r24, Z
     23a:	80 68       	ori	r24, 0x80	; 128
     23c:	80 83       	st	Z, r24
     23e:	8f e9       	ldi	r24, 0x9F	; 159
     240:	9f e0       	ldi	r25, 0x0F	; 15
     242:	01 97       	sbiw	r24, 0x01	; 1
     244:	f1 f7       	brne	.-4      	; 0x242 <ADC_init+0x1a>
     246:	00 c0       	rjmp	.+0      	; 0x248 <ADC_init+0x20>
     248:	00 00       	nop
     24a:	08 95       	ret

0000024c <read_ADC>:
     24c:	ec e7       	ldi	r30, 0x7C	; 124
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	80 81       	ld	r24, Z
     252:	80 7f       	andi	r24, 0xF0	; 240
     254:	80 83       	st	Z, r24
     256:	80 81       	ld	r24, Z
     258:	80 83       	st	Z, r24
     25a:	ea e7       	ldi	r30, 0x7A	; 122
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	80 81       	ld	r24, Z
     260:	80 64       	ori	r24, 0x40	; 64
     262:	80 83       	st	Z, r24
     264:	80 81       	ld	r24, Z
     266:	86 fd       	sbrc	r24, 6
     268:	fd cf       	rjmp	.-6      	; 0x264 <read_ADC+0x18>
     26a:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     26e:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     272:	8f e9       	ldi	r24, 0x9F	; 159
     274:	9f e0       	ldi	r25, 0x0F	; 15
     276:	01 97       	sbiw	r24, 0x01	; 1
     278:	f1 f7       	brne	.-4      	; 0x276 <read_ADC+0x2a>
     27a:	00 c0       	rjmp	.+0      	; 0x27c <read_ADC+0x30>
     27c:	00 00       	nop
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	0e 94 24 05 	call	0xa48	; 0xa48 <__floatunsisf>
     286:	2a e0       	ldi	r18, 0x0A	; 10
     288:	38 e2       	ldi	r19, 0x28	; 40
     28a:	40 ea       	ldi	r20, 0xA0	; 160
     28c:	5b e3       	ldi	r21, 0x3B	; 59
     28e:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__mulsf3>
     292:	08 95       	ret

00000294 <set_DAC_channel0>:
     294:	cf 93       	push	r28
     296:	c8 2f       	mov	r28, r24
     298:	88 e5       	ldi	r24, 0x58	; 88
     29a:	0e 94 c8 03 	call	0x790	; 0x790 <i2c_start>
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <i2c_write>
     2a4:	8c 2f       	mov	r24, r28
     2a6:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <i2c_write>
     2aa:	0e 94 ef 03 	call	0x7de	; 0x7de <i2c_stop>
     2ae:	cf 91       	pop	r28
     2b0:	08 95       	ret

000002b2 <set_DAC_channel1>:
     2b2:	cf 93       	push	r28
     2b4:	c8 2f       	mov	r28, r24
     2b6:	88 e5       	ldi	r24, 0x58	; 88
     2b8:	0e 94 c8 03 	call	0x790	; 0x790 <i2c_start>
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <i2c_write>
     2c2:	8c 2f       	mov	r24, r28
     2c4:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <i2c_write>
     2c8:	0e 94 ef 03 	call	0x7de	; 0x7de <i2c_stop>
     2cc:	cf 91       	pop	r28
     2ce:	08 95       	ret

000002d0 <G_command>:
// Command Functions
////////////////////////////////////////////////////////////

//Reading from the ADC and G command
void G_command() 
{
     2d0:	0f 93       	push	r16
     2d2:	1f 93       	push	r17
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
     2d8:	cd b7       	in	r28, 0x3d	; 61
     2da:	de b7       	in	r29, 0x3e	; 62
     2dc:	60 97       	sbiw	r28, 0x10	; 16
     2de:	0f b6       	in	r0, 0x3f	; 63
     2e0:	f8 94       	cli
     2e2:	de bf       	out	0x3e, r29	; 62
     2e4:	0f be       	out	0x3f, r0	; 63
     2e6:	cd bf       	out	0x3d, r28	; 61
	float voltage = read_ADC();												//Read a voltage measurement through ADC channel 0						
     2e8:	0e 94 26 01 	call	0x24c	; 0x24c <read_ADC>
	char vstr[16];															//Initialize a buffer voltage string to be sent across serial communication
	sprintf(vstr, "%.3f", voltage);											//Format the float into the string
     2ec:	9f 93       	push	r25
     2ee:	8f 93       	push	r24
     2f0:	7f 93       	push	r23
     2f2:	6f 93       	push	r22
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	91 e0       	ldi	r25, 0x01	; 1
     2f8:	9f 93       	push	r25
     2fa:	8f 93       	push	r24
     2fc:	8e 01       	movw	r16, r28
     2fe:	0f 5f       	subi	r16, 0xFF	; 255
     300:	1f 4f       	sbci	r17, 0xFF	; 255
     302:	1f 93       	push	r17
     304:	0f 93       	push	r16
     306:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <sprintf>
	USART0_SendString("v = ");												//Sent over USART in this format
     30a:	85 e0       	ldi	r24, 0x05	; 5
     30c:	91 e0       	ldi	r25, 0x01	; 1
     30e:	0e 94 05 01 	call	0x20a	; 0x20a <USART0_SendString>
	USART0_SendString(vstr);												//Send voltage string
     312:	c8 01       	movw	r24, r16
     314:	0e 94 05 01 	call	0x20a	; 0x20a <USART0_SendString>
	USART0_SendString(" V\r\n");												//End with a carriage and new line character 
     318:	8a e0       	ldi	r24, 0x0A	; 10
     31a:	91 e0       	ldi	r25, 0x01	; 1
     31c:	0e 94 05 01 	call	0x20a	; 0x20a <USART0_SendString>
}
     320:	0f b6       	in	r0, 0x3f	; 63
     322:	f8 94       	cli
     324:	de bf       	out	0x3e, r29	; 62
     326:	0f be       	out	0x3f, r0	; 63
     328:	cd bf       	out	0x3d, r28	; 61
     32a:	60 96       	adiw	r28, 0x10	; 16
     32c:	0f b6       	in	r0, 0x3f	; 63
     32e:	f8 94       	cli
     330:	de bf       	out	0x3e, r29	; 62
     332:	0f be       	out	0x3f, r0	; 63
     334:	cd bf       	out	0x3d, r28	; 61
     336:	df 91       	pop	r29
     338:	cf 91       	pop	r28
     33a:	1f 91       	pop	r17
     33c:	0f 91       	pop	r16
     33e:	08 95       	ret

00000340 <M_command>:

//M command that takes multiple readings from the ADC at set intervals and time amounts
void M_command(char* params) 
{
     340:	2f 92       	push	r2
     342:	3f 92       	push	r3
     344:	4f 92       	push	r4
     346:	5f 92       	push	r5
     348:	6f 92       	push	r6
     34a:	7f 92       	push	r7
     34c:	8f 92       	push	r8
     34e:	9f 92       	push	r9
     350:	af 92       	push	r10
     352:	bf 92       	push	r11
     354:	cf 92       	push	r12
     356:	df 92       	push	r13
     358:	ef 92       	push	r14
     35a:	ff 92       	push	r15
     35c:	0f 93       	push	r16
     35e:	1f 93       	push	r17
     360:	cf 93       	push	r28
     362:	df 93       	push	r29
     364:	cd b7       	in	r28, 0x3d	; 61
     366:	de b7       	in	r29, 0x3e	; 62
     368:	a2 97       	sbiw	r28, 0x22	; 34
     36a:	0f b6       	in	r0, 0x3f	; 63
     36c:	f8 94       	cli
     36e:	de bf       	out	0x3e, r29	; 62
     370:	0f be       	out	0x3f, r0	; 63
     372:	cd bf       	out	0x3d, r28	; 61
																			//Find the comma separators
																			//strchr looks for instances of specific characters in a string, in this case it is looking for the commas needed for the command
	char* first_comma = strchr(params, ',');								//Find the address of the first comma
     374:	6c e2       	ldi	r22, 0x2C	; 44
     376:	70 e0       	ldi	r23, 0x00	; 0
     378:	0e 94 01 0b 	call	0x1602	; 0x1602 <strchr>
	char* second_comma;														//Create a pointer to the second comma character
	if (first_comma != NULL)												//If the first comma was detected we can look for the second
     37c:	00 97       	sbiw	r24, 0x00	; 0
     37e:	59 f0       	breq	.+22     	; 0x396 <M_command+0x56>
	{			
		second_comma = strchr(first_comma + 1, ',');						//Search for second comma and save address in pointer
     380:	8c 01       	movw	r16, r24
     382:	0f 5f       	subi	r16, 0xFF	; 255
     384:	1f 4f       	sbci	r17, 0xFF	; 255
     386:	6c e2       	ldi	r22, 0x2C	; 44
     388:	70 e0       	ldi	r23, 0x00	; 0
     38a:	c8 01       	movw	r24, r16
     38c:	0e 94 01 0b 	call	0x1602	; 0x1602 <strchr>
     390:	7c 01       	movw	r14, r24
	else 
	{
		second_comma = NULL;												//No first comma found set to NULL
	}
	
	if (!first_comma || !second_comma)										//If two commas are not detected the formatting is incorrect and send a message saying so
     392:	89 2b       	or	r24, r25
     394:	29 f4       	brne	.+10     	; 0x3a0 <M_command+0x60>
	{
		USART0_SendString("Error: Incorrect M format\r\n");
     396:	8f e0       	ldi	r24, 0x0F	; 15
     398:	91 e0       	ldi	r25, 0x01	; 1
     39a:	0e 94 05 01 	call	0x20a	; 0x20a <USART0_SendString>
		return;
     39e:	7a c0       	rjmp	.+244    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
	}
	
	int num_readings = atoi(first_comma + 1);								//Convert the ASCII label for the number of readings (starting address after the first comma) to an integer
     3a0:	c8 01       	movw	r24, r16
     3a2:	0e 94 00 0a 	call	0x1400	; 0x1400 <atoi>
     3a6:	4c 01       	movw	r8, r24
	int delay_seconds = atoi(second_comma + 1);								//Convert the ASCII label for the delay between readings (starting address after the second comma) to an integer
     3a8:	c7 01       	movw	r24, r14
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	0e 94 00 0a 	call	0x1400	; 0x1400 <atoi>
     3b0:	8c 01       	movw	r16, r24
	
	if (num_readings < 2 || num_readings > 20)								//Ensure number of readings is between 2 and 20
     3b2:	c4 01       	movw	r24, r8
     3b4:	02 97       	sbiw	r24, 0x02	; 2
     3b6:	43 97       	sbiw	r24, 0x13	; 19
     3b8:	28 f0       	brcs	.+10     	; 0x3c4 <M_command+0x84>
	{
		USART0_SendString("Error: Number of readings must be 2-20\r\n");
     3ba:	8b e2       	ldi	r24, 0x2B	; 43
     3bc:	91 e0       	ldi	r25, 0x01	; 1
     3be:	0e 94 05 01 	call	0x20a	; 0x20a <USART0_SendString>
		return;
     3c2:	68 c0       	rjmp	.+208    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
	}
	
	if (delay_seconds < 1 || delay_seconds > 10)							//Ensure that the delay time is between 1 and 10 seconds
     3c4:	c8 01       	movw	r24, r16
     3c6:	01 97       	sbiw	r24, 0x01	; 1
     3c8:	0a 97       	sbiw	r24, 0x0a	; 10
     3ca:	20 f4       	brcc	.+8      	; 0x3d4 <M_command+0x94>
	
	int elapsed_time = 0;													//track the time elapsed for USART communication
	char time_str[16];														//empty time string
	char vstr[16];															//empty voltage string
	
	for (int i = 0; i < num_readings; i++)									//Take a measurement for each reading
     3cc:	18 14       	cp	r1, r8
     3ce:	19 04       	cpc	r1, r9
     3d0:	34 f0       	brlt	.+12     	; 0x3de <M_command+0x9e>
     3d2:	60 c0       	rjmp	.+192    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
		return;
	}
	
	if (delay_seconds < 1 || delay_seconds > 10)							//Ensure that the delay time is between 1 and 10 seconds
	{
		USART0_SendString("Error: Delay must be 1-10 seconds\r\n");
     3d4:	84 e5       	ldi	r24, 0x54	; 84
     3d6:	91 e0       	ldi	r25, 0x01	; 1
     3d8:	0e 94 05 01 	call	0x20a	; 0x20a <USART0_SendString>
		return;
     3dc:	5b c0       	rjmp	.+182    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
	
	int elapsed_time = 0;													//track the time elapsed for USART communication
	char time_str[16];														//empty time string
	char vstr[16];															//empty voltage string
	
	for (int i = 0; i < num_readings; i++)									//Take a measurement for each reading
     3de:	c1 2c       	mov	r12, r1
     3e0:	d1 2c       	mov	r13, r1
     3e2:	e1 2c       	mov	r14, r1
     3e4:	f1 2c       	mov	r15, r1
	{
		float voltage = read_ADC();											//Take reading at current time

		sprintf(time_str, "t=%d s, v=", elapsed_time);						//Format string with a float using sprintf to include elapsed time
     3e6:	9e 01       	movw	r18, r28
     3e8:	2f 5f       	subi	r18, 0xFF	; 255
     3ea:	3f 4f       	sbci	r19, 0xFF	; 255
     3ec:	39 01       	movw	r6, r18

		USART0_SendString(time_str);										//Send time string over USART
		
		sprintf(vstr, "%.3f V", voltage);									//Format string with a float using sprintf to include voltage reading
     3ee:	5e 01       	movw	r10, r28
     3f0:	31 e1       	ldi	r19, 0x11	; 17
     3f2:	a3 0e       	add	r10, r19
     3f4:	b1 1c       	adc	r11, r1
		USART0_SendString(vstr);											//Send voltage string
		USART0_SendString("\r\n");											//Send carriage and new line character
		
		if (i < num_readings - 1)											//For all measurements except the last one	
     3f6:	c4 01       	movw	r24, r8
     3f8:	01 97       	sbiw	r24, 0x01	; 1
     3fa:	9a a3       	std	Y+34, r25	; 0x22
     3fc:	89 a3       	std	Y+33, r24	; 0x21
	char time_str[16];														//empty time string
	char vstr[16];															//empty voltage string
	
	for (int i = 0; i < num_readings; i++)									//Take a measurement for each reading
	{
		float voltage = read_ADC();											//Take reading at current time
     3fe:	0e 94 26 01 	call	0x24c	; 0x24c <read_ADC>
     402:	56 2e       	mov	r5, r22
     404:	47 2e       	mov	r4, r23
     406:	38 2e       	mov	r3, r24
     408:	29 2e       	mov	r2, r25

		sprintf(time_str, "t=%d s, v=", elapsed_time);						//Format string with a float using sprintf to include elapsed time
     40a:	ff 92       	push	r15
     40c:	ef 92       	push	r14
     40e:	28 e7       	ldi	r18, 0x78	; 120
     410:	31 e0       	ldi	r19, 0x01	; 1
     412:	3f 93       	push	r19
     414:	2f 93       	push	r18
     416:	7f 92       	push	r7
     418:	6f 92       	push	r6
     41a:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <sprintf>

		USART0_SendString(time_str);										//Send time string over USART
     41e:	c3 01       	movw	r24, r6
     420:	0e 94 05 01 	call	0x20a	; 0x20a <USART0_SendString>
		
		sprintf(vstr, "%.3f V", voltage);									//Format string with a float using sprintf to include voltage reading
     424:	2f 92       	push	r2
     426:	3f 92       	push	r3
     428:	4f 92       	push	r4
     42a:	5f 92       	push	r5
     42c:	83 e8       	ldi	r24, 0x83	; 131
     42e:	91 e0       	ldi	r25, 0x01	; 1
     430:	9f 93       	push	r25
     432:	8f 93       	push	r24
     434:	bf 92       	push	r11
     436:	af 92       	push	r10
     438:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <sprintf>
		USART0_SendString(vstr);											//Send voltage string
     43c:	c5 01       	movw	r24, r10
     43e:	0e 94 05 01 	call	0x20a	; 0x20a <USART0_SendString>
		USART0_SendString("\r\n");											//Send carriage and new line character
     442:	8f e1       	ldi	r24, 0x1F	; 31
     444:	92 e0       	ldi	r25, 0x02	; 2
     446:	0e 94 05 01 	call	0x20a	; 0x20a <USART0_SendString>
		
		if (i < num_readings - 1)											//For all measurements except the last one	
     44a:	0f b6       	in	r0, 0x3f	; 63
     44c:	f8 94       	cli
     44e:	de bf       	out	0x3e, r29	; 62
     450:	0f be       	out	0x3f, r0	; 63
     452:	cd bf       	out	0x3d, r28	; 61
     454:	29 a1       	ldd	r18, Y+33	; 0x21
     456:	3a a1       	ldd	r19, Y+34	; 0x22
     458:	c2 16       	cp	r12, r18
     45a:	d3 06       	cpc	r13, r19
     45c:	a4 f4       	brge	.+40     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
		{
			for (int j = 0; j < delay_seconds; j++)							//Delay between readings 
     45e:	10 16       	cp	r1, r16
     460:	11 06       	cpc	r1, r17
     462:	7c f4       	brge	.+30     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     468:	3f ef       	ldi	r19, 0xFF	; 255
     46a:	43 ed       	ldi	r20, 0xD3	; 211
     46c:	20 e3       	ldi	r18, 0x30	; 48
     46e:	31 50       	subi	r19, 0x01	; 1
     470:	40 40       	sbci	r20, 0x00	; 0
     472:	20 40       	sbci	r18, 0x00	; 0
     474:	e1 f7       	brne	.-8      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     476:	00 c0       	rjmp	.+0      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     478:	00 00       	nop
     47a:	01 96       	adiw	r24, 0x01	; 1
     47c:	08 17       	cp	r16, r24
     47e:	19 07       	cpc	r17, r25
     480:	99 f7       	brne	.-26     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
			{
				_delay_ms(1000);											//Delay 1-second intervals
			}
			elapsed_time += delay_seconds;									//Update time elapsed in seconds for display
     482:	e0 0e       	add	r14, r16
     484:	f1 1e       	adc	r15, r17
	
	int elapsed_time = 0;													//track the time elapsed for USART communication
	char time_str[16];														//empty time string
	char vstr[16];															//empty voltage string
	
	for (int i = 0; i < num_readings; i++)									//Take a measurement for each reading
     486:	3f ef       	ldi	r19, 0xFF	; 255
     488:	c3 1a       	sub	r12, r19
     48a:	d3 0a       	sbc	r13, r19
     48c:	8c 14       	cp	r8, r12
     48e:	9d 04       	cpc	r9, r13
     490:	09 f0       	breq	.+2      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     492:	b5 cf       	rjmp	.-150    	; 0x3fe <M_command+0xbe>
				_delay_ms(1000);											//Delay 1-second intervals
			}
			elapsed_time += delay_seconds;									//Update time elapsed in seconds for display
		}
	}
}
     494:	a2 96       	adiw	r28, 0x22	; 34
     496:	0f b6       	in	r0, 0x3f	; 63
     498:	f8 94       	cli
     49a:	de bf       	out	0x3e, r29	; 62
     49c:	0f be       	out	0x3f, r0	; 63
     49e:	cd bf       	out	0x3d, r28	; 61
     4a0:	df 91       	pop	r29
     4a2:	cf 91       	pop	r28
     4a4:	1f 91       	pop	r17
     4a6:	0f 91       	pop	r16
     4a8:	ff 90       	pop	r15
     4aa:	ef 90       	pop	r14
     4ac:	df 90       	pop	r13
     4ae:	cf 90       	pop	r12
     4b0:	bf 90       	pop	r11
     4b2:	af 90       	pop	r10
     4b4:	9f 90       	pop	r9
     4b6:	8f 90       	pop	r8
     4b8:	7f 90       	pop	r7
     4ba:	6f 90       	pop	r6
     4bc:	5f 90       	pop	r5
     4be:	4f 90       	pop	r4
     4c0:	3f 90       	pop	r3
     4c2:	2f 90       	pop	r2
     4c4:	08 95       	ret

000004c6 <S_command>:

//S command and DAC functionality
void S_command(char* params) 
{
     4c6:	8f 92       	push	r8
     4c8:	9f 92       	push	r9
     4ca:	af 92       	push	r10
     4cc:	bf 92       	push	r11
     4ce:	cf 92       	push	r12
     4d0:	df 92       	push	r13
     4d2:	ef 92       	push	r14
     4d4:	ff 92       	push	r15
     4d6:	0f 93       	push	r16
     4d8:	1f 93       	push	r17
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
     4de:	cd b7       	in	r28, 0x3d	; 61
     4e0:	de b7       	in	r29, 0x3e	; 62
     4e2:	a0 97       	sbiw	r28, 0x20	; 32
     4e4:	0f b6       	in	r0, 0x3f	; 63
     4e6:	f8 94       	cli
     4e8:	de bf       	out	0x3e, r29	; 62
     4ea:	0f be       	out	0x3f, r0	; 63
     4ec:	cd bf       	out	0x3d, r28	; 61
																			// Find the comma separators
																			//strchr looks for instances of specific characters in a string, in this case it is looking for the commas needed for the command
	char* first_comma = strchr(params, ',');
     4ee:	6c e2       	ldi	r22, 0x2C	; 44
     4f0:	70 e0       	ldi	r23, 0x00	; 0
     4f2:	0e 94 01 0b 	call	0x1602	; 0x1602 <strchr>
	char* second_comma;														//Create a pointer to the second comma character
	if (first_comma != NULL)												//If the first comma was detected we can look for the second
     4f6:	00 97       	sbiw	r24, 0x00	; 0
     4f8:	59 f0       	breq	.+22     	; 0x510 <S_command+0x4a>
	{
		second_comma = strchr(first_comma + 1, ',');						//Search for second comma and save address in pointer
     4fa:	8c 01       	movw	r16, r24
     4fc:	0f 5f       	subi	r16, 0xFF	; 255
     4fe:	1f 4f       	sbci	r17, 0xFF	; 255
     500:	6c e2       	ldi	r22, 0x2C	; 44
     502:	70 e0       	ldi	r23, 0x00	; 0
     504:	c8 01       	movw	r24, r16
     506:	0e 94 01 0b 	call	0x1602	; 0x1602 <strchr>
     50a:	7c 01       	movw	r14, r24
	}
	else
	{
		second_comma = NULL;												//No first comma found set to NULL
	}
	if (!first_comma || !second_comma)										//If there are not two commas send an error
     50c:	89 2b       	or	r24, r25
     50e:	29 f4       	brne	.+10     	; 0x51a <S_command+0x54>
	{
		USART0_SendString("Error: Incorrect S format\r\n");
     510:	8a e8       	ldi	r24, 0x8A	; 138
     512:	91 e0       	ldi	r25, 0x01	; 1
     514:	0e 94 05 01 	call	0x20a	; 0x20a <USART0_SendString>
		return;
     518:	7a c0       	rjmp	.+244    	; 0x60e <S_command+0x148>
	}
	
	int channel = atoi(first_comma + 1);									//Convert the ASCII label for the channel (address after the first comma) to an integer
     51a:	c8 01       	movw	r24, r16
     51c:	0e 94 00 0a 	call	0x1400	; 0x1400 <atoi>
     520:	8c 01       	movw	r16, r24
	float input_voltage = atof(second_comma + 1);							//Convert the ASCII label for the voltage input (starting address after the second comm) to a float
     522:	c7 01       	movw	r24, r14
     524:	01 96       	adiw	r24, 0x01	; 1
     526:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <atof>
     52a:	6b 01       	movw	r12, r22
     52c:	7c 01       	movw	r14, r24
	
	if (channel != 0 && channel != 1)										//Ensure valid channel was input
     52e:	02 30       	cpi	r16, 0x02	; 2
     530:	11 05       	cpc	r17, r1
     532:	28 f0       	brcs	.+10     	; 0x53e <S_command+0x78>
	{										
		USART0_SendString("Error: Channel must be 0 or 1\r\n");
     534:	86 ea       	ldi	r24, 0xA6	; 166
     536:	91 e0       	ldi	r25, 0x01	; 1
     538:	0e 94 05 01 	call	0x20a	; 0x20a <USART0_SendString>
		return;
     53c:	68 c0       	rjmp	.+208    	; 0x60e <S_command+0x148>
	}
	
	if (input_voltage < 0.0 || input_voltage > 5.0)							//Ensure valid voltage was input
     53e:	20 e0       	ldi	r18, 0x00	; 0
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	a9 01       	movw	r20, r18
     544:	0e 94 77 04 	call	0x8ee	; 0x8ee <__cmpsf2>
     548:	88 23       	and	r24, r24
     54a:	54 f0       	brlt	.+20     	; 0x560 <S_command+0x9a>
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	40 ea       	ldi	r20, 0xA0	; 160
     552:	50 e4       	ldi	r21, 0x40	; 64
     554:	c7 01       	movw	r24, r14
     556:	b6 01       	movw	r22, r12
     558:	0e 94 d6 05 	call	0xbac	; 0xbac <__gesf2>
     55c:	18 16       	cp	r1, r24
     55e:	2c f4       	brge	.+10     	; 0x56a <S_command+0xa4>
	{						
		USART0_SendString("Error: Voltage must be 0.0-5.0\r\n");
     560:	86 ec       	ldi	r24, 0xC6	; 198
     562:	91 e0       	ldi	r25, 0x01	; 1
     564:	0e 94 05 01 	call	0x20a	; 0x20a <USART0_SendString>
		return;
     568:	52 c0       	rjmp	.+164    	; 0x60e <S_command+0x148>
}

//Function that converts the DAC value to an integer from a float
int DAC_voltage_conversion(float voltage)									//A value from 0 - 255 is needed to set the DAC
{																			//Uses a reference voltage of 5
	int return_voltage = voltage * 256.0 / 5.0 + 0.5;						//Add 0.5 for correct rounding		 														
     56a:	20 e0       	ldi	r18, 0x00	; 0
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	40 e8       	ldi	r20, 0x80	; 128
     570:	53 e4       	ldi	r21, 0x43	; 67
     572:	c7 01       	movw	r24, r14
     574:	b6 01       	movw	r22, r12
     576:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__mulsf3>
     57a:	20 e0       	ldi	r18, 0x00	; 0
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	40 ea       	ldi	r20, 0xA0	; 160
     580:	50 e4       	ldi	r21, 0x40	; 64
     582:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__divsf3>
     586:	20 e0       	ldi	r18, 0x00	; 0
     588:	30 e0       	ldi	r19, 0x00	; 0
     58a:	40 e0       	ldi	r20, 0x00	; 0
     58c:	5f e3       	ldi	r21, 0x3F	; 63
     58e:	0e 94 0b 04 	call	0x816	; 0x816 <__addsf3>
     592:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__fixsfsi>
     596:	6b 01       	movw	r12, r22
     598:	7c 01       	movw	r14, r24
		return;
	}
	
	int dac_value = DAC_voltage_conversion(input_voltage);					//Convert the input voltage into a value that the DAC can read (0-255)
	
	float actual_voltage = dac_value * (5.0 / 256.0);						//Calculate the actual voltage that will be present on DAC output after float to integer rounding
     59a:	07 2e       	mov	r0, r23
     59c:	00 0c       	add	r0, r0
     59e:	88 0b       	sbc	r24, r24
     5a0:	99 0b       	sbc	r25, r25
     5a2:	0e 94 26 05 	call	0xa4c	; 0xa4c <__floatsisf>
     5a6:	20 e0       	ldi	r18, 0x00	; 0
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	40 ea       	ldi	r20, 0xA0	; 160
     5ac:	5c e3       	ldi	r21, 0x3C	; 60
     5ae:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__mulsf3>
     5b2:	b6 2e       	mov	r11, r22
     5b4:	a7 2e       	mov	r10, r23
     5b6:	98 2e       	mov	r9, r24
     5b8:	89 2e       	mov	r8, r25
	
	if (channel == 0)														//If channel 0 was specified
     5ba:	01 2b       	or	r16, r17
     5bc:	41 f4       	brne	.+16     	; 0x5ce <S_command+0x108>
	{
		set_DAC_channel0(dac_value);										//Set channel 0 output voltage
     5be:	c6 01       	movw	r24, r12
     5c0:	0e 94 4a 01 	call	0x294	; 0x294 <set_DAC_channel0>
		USART0_SendString("DAC channel 0 set to ");							//Initial display string for channel 0
     5c4:	87 ee       	ldi	r24, 0xE7	; 231
     5c6:	91 e0       	ldi	r25, 0x01	; 1
     5c8:	0e 94 05 01 	call	0x20a	; 0x20a <USART0_SendString>
     5cc:	07 c0       	rjmp	.+14     	; 0x5dc <S_command+0x116>
	} 
	else																	//Channel 1 was specified
	{
		set_DAC_channel1(dac_value);										//Set channel 1 output voltage
     5ce:	c6 01       	movw	r24, r12
     5d0:	0e 94 59 01 	call	0x2b2	; 0x2b2 <set_DAC_channel1>
		USART0_SendString("DAC channel 1 set to ");							//Initial display string for channel 1
     5d4:	8d ef       	ldi	r24, 0xFD	; 253
     5d6:	91 e0       	ldi	r25, 0x01	; 1
     5d8:	0e 94 05 01 	call	0x20a	; 0x20a <USART0_SendString>
	}
	
	char vstr[32];															//Initialize buffer to put voltage information in
	sprintf(vstr, "%.2f V (%dd)\r\n", actual_voltage, dac_value);			//Use sprintf to format display and round the voltage, while showing the integer vlaue sent to the DAC
     5dc:	df 92       	push	r13
     5de:	cf 92       	push	r12
     5e0:	8f 92       	push	r8
     5e2:	9f 92       	push	r9
     5e4:	af 92       	push	r10
     5e6:	bf 92       	push	r11
     5e8:	83 e1       	ldi	r24, 0x13	; 19
     5ea:	92 e0       	ldi	r25, 0x02	; 2
     5ec:	9f 93       	push	r25
     5ee:	8f 93       	push	r24
     5f0:	8e 01       	movw	r16, r28
     5f2:	0f 5f       	subi	r16, 0xFF	; 255
     5f4:	1f 4f       	sbci	r17, 0xFF	; 255
     5f6:	1f 93       	push	r17
     5f8:	0f 93       	push	r16
     5fa:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <sprintf>
	USART0_SendString(vstr);												//Send string over USART
     5fe:	c8 01       	movw	r24, r16
     600:	0e 94 05 01 	call	0x20a	; 0x20a <USART0_SendString>
     604:	0f b6       	in	r0, 0x3f	; 63
     606:	f8 94       	cli
     608:	de bf       	out	0x3e, r29	; 62
     60a:	0f be       	out	0x3f, r0	; 63
     60c:	cd bf       	out	0x3d, r28	; 61
}
     60e:	a0 96       	adiw	r28, 0x20	; 32
     610:	0f b6       	in	r0, 0x3f	; 63
     612:	f8 94       	cli
     614:	de bf       	out	0x3e, r29	; 62
     616:	0f be       	out	0x3f, r0	; 63
     618:	cd bf       	out	0x3d, r28	; 61
     61a:	df 91       	pop	r29
     61c:	cf 91       	pop	r28
     61e:	1f 91       	pop	r17
     620:	0f 91       	pop	r16
     622:	ff 90       	pop	r15
     624:	ef 90       	pop	r14
     626:	df 90       	pop	r13
     628:	cf 90       	pop	r12
     62a:	bf 90       	pop	r11
     62c:	af 90       	pop	r10
     62e:	9f 90       	pop	r9
     630:	8f 90       	pop	r8
     632:	08 95       	ret

00000634 <process_command>:
//By reading the command character sends you to that command logic to perform action
//Takes the character that represents a specific command and the pointer to the command parameters
//Returns nothing
void process_command(char command, char* params) 
{
	switch (command) 
     634:	8d 34       	cpi	r24, 0x4D	; 77
     636:	59 f0       	breq	.+22     	; 0x64e <process_command+0x1a>
     638:	83 35       	cpi	r24, 0x53	; 83
     63a:	29 f0       	breq	.+10     	; 0x646 <process_command+0x12>
     63c:	87 34       	cpi	r24, 0x47	; 71
     63e:	59 f4       	brne	.+22     	; 0x656 <process_command+0x22>
	{														
		case 'G':															//If Case G go to the G command
		G_command();
     640:	0e 94 68 01 	call	0x2d0	; 0x2d0 <G_command>
		break;
     644:	08 95       	ret
		case 'S':															//If Case S go to the S command
		S_command(params);
     646:	cb 01       	movw	r24, r22
     648:	0e 94 63 02 	call	0x4c6	; 0x4c6 <S_command>
		break;
     64c:	08 95       	ret
		case 'M':
		M_command(params);													//If Case M go to the M command
     64e:	cb 01       	movw	r24, r22
     650:	0e 94 a0 01 	call	0x340	; 0x340 <M_command>
		break;
     654:	08 95       	ret
		default:
		USART0_SendString("Unknown command\r\n");								//If none of the commands let the user know input is unknown
     656:	82 e2       	ldi	r24, 0x22	; 34
     658:	92 e0       	ldi	r25, 0x02	; 2
     65a:	0e 94 05 01 	call	0x20a	; 0x20a <USART0_SendString>
     65e:	08 95       	ret

00000660 <read_line>:

//Function that reads a line of text from the USART until newline character or timeout has been reached
//Takes a pointer to the buffer string and the max number of characters to be read
//Returns the length of the string (number of characters that have been read)
int read_line(char* buffer, int max_length) 
{
     660:	cf 92       	push	r12
     662:	df 92       	push	r13
     664:	ef 92       	push	r14
     666:	ff 92       	push	r15
     668:	0f 93       	push	r16
     66a:	1f 93       	push	r17
     66c:	cf 93       	push	r28
     66e:	df 93       	push	r29
     670:	dc 01       	movw	r26, r24
	int idx = 0;															//Buffer index (counts the number of characters read in serial communication)
	unsigned long start_time = 0;											//Track time that has elapsed for a timeout
     672:	c1 2c       	mov	r12, r1
     674:	d1 2c       	mov	r13, r1
     676:	76 01       	movw	r14, r12
//Function that reads a line of text from the USART until newline character or timeout has been reached
//Takes a pointer to the buffer string and the max number of characters to be read
//Returns the length of the string (number of characters that have been read)
int read_line(char* buffer, int max_length) 
{
	int idx = 0;															//Buffer index (counts the number of characters read in serial communication)
     678:	40 e0       	ldi	r20, 0x00	; 0
     67a:	50 e0       	ldi	r21, 0x00	; 0
	unsigned long start_time = 0;											//Track time that has elapsed for a timeout
	
	while (idx < max_length - 1)											//Continue reading until buffer is full (excluding null terminating character)
     67c:	9b 01       	movw	r18, r22
     67e:	21 50       	subi	r18, 0x01	; 1
     680:	31 09       	sbc	r19, r1
	{											
		if (UCSR0A & (1<<RXC0)) 
     682:	e0 ec       	ldi	r30, 0xC0	; 192
     684:	f0 e0       	ldi	r31, 0x00	; 0
		{																	//Check if character is available to be received (UCSR0A -> USART Control and Status Register A)																//RXC0 -> specific bit position in this register
			char c = UDR0;													//Read the character from the serial communication
     686:	06 ec       	ldi	r16, 0xC6	; 198
     688:	10 e0       	ldi	r17, 0x00	; 0
int read_line(char* buffer, int max_length) 
{
	int idx = 0;															//Buffer index (counts the number of characters read in serial communication)
	unsigned long start_time = 0;											//Track time that has elapsed for a timeout
	
	while (idx < max_length - 1)											//Continue reading until buffer is full (excluding null terminating character)
     68a:	34 c0       	rjmp	.+104    	; 0x6f4 <read_line+0x94>
	{											
		if (UCSR0A & (1<<RXC0)) 
     68c:	90 81       	ld	r25, Z
     68e:	99 23       	and	r25, r25
     690:	bc f4       	brge	.+46     	; 0x6c0 <read_line+0x60>
		{																	//Check if character is available to be received (UCSR0A -> USART Control and Status Register A)																//RXC0 -> specific bit position in this register
			char c = UDR0;													//Read the character from the serial communication
     692:	e8 01       	movw	r28, r16
     694:	98 81       	ld	r25, Y
			
			if (c == '\r' || c == '\n') 
     696:	9d 30       	cpi	r25, 0x0D	; 13
     698:	11 f0       	breq	.+4      	; 0x69e <read_line+0x3e>
     69a:	9a 30       	cpi	r25, 0x0A	; 10
     69c:	31 f4       	brne	.+12     	; 0x6aa <read_line+0x4a>
			{																//If the character is the carriage character or the new line character
				buffer[idx] = '\0';											//Null terminate the string
     69e:	a4 0f       	add	r26, r20
     6a0:	b5 1f       	adc	r27, r21
     6a2:	1c 92       	st	X, r1
				return idx;													//Return the number of characters
     6a4:	84 2f       	mov	r24, r20
     6a6:	95 2f       	mov	r25, r21
     6a8:	31 c0       	rjmp	.+98     	; 0x70c <read_line+0xac>
			}
			buffer[idx++] = c;												//Store characters in the buffer and increment the index
     6aa:	7d 01       	movw	r14, r26
     6ac:	e4 0e       	add	r14, r20
     6ae:	f5 1e       	adc	r15, r21
     6b0:	e7 01       	movw	r28, r14
     6b2:	98 83       	st	Y, r25
     6b4:	4f 5f       	subi	r20, 0xFF	; 255
     6b6:	5f 4f       	sbci	r21, 0xFF	; 255
			start_time = 0;													// Reset timeout counter when character is received
     6b8:	c1 2c       	mov	r12, r1
     6ba:	d1 2c       	mov	r13, r1
     6bc:	76 01       	movw	r14, r12
     6be:	1a c0       	rjmp	.+52     	; 0x6f4 <read_line+0x94>
     6c0:	8f e9       	ldi	r24, 0x9F	; 159
     6c2:	9f e0       	ldi	r25, 0x0F	; 15
     6c4:	01 97       	sbiw	r24, 0x01	; 1
     6c6:	f1 f7       	brne	.-4      	; 0x6c4 <read_line+0x64>
     6c8:	00 c0       	rjmp	.+0      	; 0x6ca <read_line+0x6a>
     6ca:	00 00       	nop
		} 
		else 
		{
			_delay_ms(1);													//No character to read, delay
			if (++start_time > COMMAND_TIMEOUT_MS)							//If we have a timeout
     6cc:	9f ef       	ldi	r25, 0xFF	; 255
     6ce:	c9 1a       	sub	r12, r25
     6d0:	d9 0a       	sbc	r13, r25
     6d2:	e9 0a       	sbc	r14, r25
     6d4:	f9 0a       	sbc	r15, r25
     6d6:	c5 e6       	ldi	r28, 0x65	; 101
     6d8:	cc 16       	cp	r12, r28
     6da:	d1 04       	cpc	r13, r1
     6dc:	e1 04       	cpc	r14, r1
     6de:	f1 04       	cpc	r15, r1
     6e0:	48 f0       	brcs	.+18     	; 0x6f4 <read_line+0x94>
			{						
				buffer[idx] = '\0';											//Null-terminate the string
     6e2:	a4 0f       	add	r26, r20
     6e4:	b5 1f       	adc	r27, r21
     6e6:	1c 92       	st	X, r1
				
				if (idx > 0) 
     6e8:	14 16       	cp	r1, r20
     6ea:	15 06       	cpc	r1, r21
     6ec:	6c f4       	brge	.+26     	; 0x708 <read_line+0xa8>
     6ee:	84 2f       	mov	r24, r20
     6f0:	95 2f       	mov	r25, r21
     6f2:	0c c0       	rjmp	.+24     	; 0x70c <read_line+0xac>
int read_line(char* buffer, int max_length) 
{
	int idx = 0;															//Buffer index (counts the number of characters read in serial communication)
	unsigned long start_time = 0;											//Track time that has elapsed for a timeout
	
	while (idx < max_length - 1)											//Continue reading until buffer is full (excluding null terminating character)
     6f4:	82 2f       	mov	r24, r18
     6f6:	93 2f       	mov	r25, r19
     6f8:	42 17       	cp	r20, r18
     6fa:	53 07       	cpc	r21, r19
     6fc:	3c f2       	brlt	.-114    	; 0x68c <read_line+0x2c>
					return -1;												//Return -1 for timeout with no data
				}
			}
		}
	}
	buffer[max_length - 1] = '\0';											//Reaching here means buffer is full
     6fe:	a6 0f       	add	r26, r22
     700:	b7 1f       	adc	r27, r23
     702:	11 97       	sbiw	r26, 0x01	; 1
     704:	1c 92       	st	X, r1
																			//Null terminate the buffer string
	return max_length - 1;													//Return the number of characters that have been read
     706:	02 c0       	rjmp	.+4      	; 0x70c <read_line+0xac>
				{
					return idx;												//Return character count if data was received
				} 
				else 
				{
					return -1;												//Return -1 for timeout with no data
     708:	8f ef       	ldi	r24, 0xFF	; 255
     70a:	9f ef       	ldi	r25, 0xFF	; 255
		}
	}
	buffer[max_length - 1] = '\0';											//Reaching here means buffer is full
																			//Null terminate the buffer string
	return max_length - 1;													//Return the number of characters that have been read
}
     70c:	df 91       	pop	r29
     70e:	cf 91       	pop	r28
     710:	1f 91       	pop	r17
     712:	0f 91       	pop	r16
     714:	ff 90       	pop	r15
     716:	ef 90       	pop	r14
     718:	df 90       	pop	r13
     71a:	cf 90       	pop	r12
     71c:	08 95       	ret

0000071e <setup>:
////////////////////////////////////////////////////////////
// Main Program
////////////////////////////////////////////////////////////

void setup() {
	USART0_Init(MYUBRR);													//Initialize the USART RS232 Serial Communication
     71e:	87 e6       	ldi	r24, 0x67	; 103
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <USART0_Init>
	ADC_init();																//Initialize the analog to digital conversion
     726:	0e 94 14 01 	call	0x228	; 0x228 <ADC_init>
	i2c_init();																//Initialize I2C communication (from library)
     72a:	0e 94 c2 03 	call	0x784	; 0x784 <i2c_init>
     72e:	08 95       	ret

00000730 <main>:
}

int main(void) {
     730:	cf 93       	push	r28
     732:	df 93       	push	r29
     734:	cd b7       	in	r28, 0x3d	; 61
     736:	de b7       	in	r29, 0x3e	; 62
     738:	a0 97       	sbiw	r28, 0x20	; 32
     73a:	0f b6       	in	r0, 0x3f	; 63
     73c:	f8 94       	cli
     73e:	de bf       	out	0x3e, r29	; 62
     740:	0f be       	out	0x3f, r0	; 63
     742:	cd bf       	out	0x3d, r28	; 61
	setup();																//Call setup function
     744:	0e 94 8f 03 	call	0x71e	; 0x71e <setup>
		if (bytes_read > 0) {												//If data is read, process it as a command
			char command = command_buffer[0];								//First character of buffer is command type
			char* params;													//Initialize a pointer to the parameters
			
			if (bytes_read > 1) {
				params = command_buffer + 1;								//If there are parameters, point to them
     748:	8e 01       	movw	r16, r28
     74a:	0e 5f       	subi	r16, 0xFE	; 254
     74c:	1f 4f       	sbci	r17, 0xFF	; 255
				} else {
				params = "";												//Otherwise, use an empty string
     74e:	0f 2e       	mov	r0, r31
     750:	f1 e2       	ldi	r31, 0x21	; 33
     752:	ef 2e       	mov	r14, r31
     754:	f2 e0       	ldi	r31, 0x02	; 2
     756:	ff 2e       	mov	r15, r31
     758:	f0 2d       	mov	r31, r0
	setup();																//Call setup function
	
	char command_buffer[32];												//Initialize a string that is 32 characters in length to read commands
	
	while (1) {
		int bytes_read = read_line(command_buffer, 32);						//Loop that reads from the Serial terminal continuously
     75a:	60 e2       	ldi	r22, 0x20	; 32
     75c:	70 e0       	ldi	r23, 0x00	; 0
     75e:	ce 01       	movw	r24, r28
     760:	01 96       	adiw	r24, 0x01	; 1
     762:	0e 94 30 03 	call	0x660	; 0x660 <read_line>
		
		if (bytes_read > 0) {												//If data is read, process it as a command
     766:	18 16       	cp	r1, r24
     768:	19 06       	cpc	r1, r25
     76a:	bc f7       	brge	.-18     	; 0x75a <main+0x2a>
			char command = command_buffer[0];								//First character of buffer is command type
     76c:	29 81       	ldd	r18, Y+1	; 0x01
			char* params;													//Initialize a pointer to the parameters
			
			if (bytes_read > 1) {
     76e:	02 97       	sbiw	r24, 0x02	; 2
     770:	1c f4       	brge	.+6      	; 0x778 <main+0x48>
				params = command_buffer + 1;								//If there are parameters, point to them
				} else {
				params = "";												//Otherwise, use an empty string
     772:	6e 2d       	mov	r22, r14
     774:	7f 2d       	mov	r23, r15
     776:	02 c0       	rjmp	.+4      	; 0x77c <main+0x4c>
		if (bytes_read > 0) {												//If data is read, process it as a command
			char command = command_buffer[0];								//First character of buffer is command type
			char* params;													//Initialize a pointer to the parameters
			
			if (bytes_read > 1) {
				params = command_buffer + 1;								//If there are parameters, point to them
     778:	60 2f       	mov	r22, r16
     77a:	71 2f       	mov	r23, r17
				} else {
				params = "";												//Otherwise, use an empty string
			}
			
			process_command(command, params);								//Call the command processing function
     77c:	82 2f       	mov	r24, r18
     77e:	0e 94 1a 03 	call	0x634	; 0x634 <process_command>
     782:	eb cf       	rjmp	.-42     	; 0x75a <main+0x2a>

00000784 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
     784:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     788:	88 e9       	ldi	r24, 0x98	; 152
     78a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
     78e:	08 95       	ret

00000790 <i2c_start>:
     790:	94 ea       	ldi	r25, 0xA4	; 164
     792:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     796:	ec eb       	ldi	r30, 0xBC	; 188
     798:	f0 e0       	ldi	r31, 0x00	; 0
     79a:	90 81       	ld	r25, Z
     79c:	99 23       	and	r25, r25
     79e:	ec f7       	brge	.-6      	; 0x79a <i2c_start+0xa>
     7a0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     7a4:	98 7f       	andi	r25, 0xF8	; 248
     7a6:	98 30       	cpi	r25, 0x08	; 8
     7a8:	11 f0       	breq	.+4      	; 0x7ae <i2c_start+0x1e>
     7aa:	90 31       	cpi	r25, 0x10	; 16
     7ac:	a1 f4       	brne	.+40     	; 0x7d6 <i2c_start+0x46>
     7ae:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
     7b2:	84 e8       	ldi	r24, 0x84	; 132
     7b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     7b8:	ec eb       	ldi	r30, 0xBC	; 188
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
     7bc:	80 81       	ld	r24, Z
     7be:	88 23       	and	r24, r24
     7c0:	ec f7       	brge	.-6      	; 0x7bc <i2c_start+0x2c>
     7c2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     7c6:	98 7f       	andi	r25, 0xF8	; 248
     7c8:	98 31       	cpi	r25, 0x18	; 24
     7ca:	39 f0       	breq	.+14     	; 0x7da <i2c_start+0x4a>
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	90 34       	cpi	r25, 0x40	; 64
     7d0:	29 f4       	brne	.+10     	; 0x7dc <i2c_start+0x4c>
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	08 95       	ret
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	08 95       	ret
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	08 95       	ret

000007de <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     7de:	84 e9       	ldi	r24, 0x94	; 148
     7e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     7e4:	ec eb       	ldi	r30, 0xBC	; 188
     7e6:	f0 e0       	ldi	r31, 0x00	; 0
     7e8:	80 81       	ld	r24, Z
     7ea:	84 fd       	sbrc	r24, 4
     7ec:	fd cf       	rjmp	.-6      	; 0x7e8 <i2c_stop+0xa>

}/* i2c_stop */
     7ee:	08 95       	ret

000007f0 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     7f0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);
     7f4:	84 e8       	ldi	r24, 0x84	; 132
     7f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     7fa:	ec eb       	ldi	r30, 0xBC	; 188
     7fc:	f0 e0       	ldi	r31, 0x00	; 0
     7fe:	80 81       	ld	r24, Z
     800:	88 23       	and	r24, r24
     802:	ec f7       	brge	.-6      	; 0x7fe <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     804:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     808:	98 7f       	andi	r25, 0xF8	; 248
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	98 32       	cpi	r25, 0x28	; 40
     80e:	09 f4       	brne	.+2      	; 0x812 <i2c_write+0x22>
     810:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     812:	08 95       	ret

00000814 <__subsf3>:
     814:	50 58       	subi	r21, 0x80	; 128

00000816 <__addsf3>:
     816:	bb 27       	eor	r27, r27
     818:	aa 27       	eor	r26, r26
     81a:	0e 94 22 04 	call	0x844	; 0x844 <__addsf3x>
     81e:	0c 94 9c 05 	jmp	0xb38	; 0xb38 <__fp_round>
     822:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__fp_pscA>
     826:	38 f0       	brcs	.+14     	; 0x836 <__addsf3+0x20>
     828:	0e 94 95 05 	call	0xb2a	; 0xb2a <__fp_pscB>
     82c:	20 f0       	brcs	.+8      	; 0x836 <__addsf3+0x20>
     82e:	39 f4       	brne	.+14     	; 0x83e <__addsf3+0x28>
     830:	9f 3f       	cpi	r25, 0xFF	; 255
     832:	19 f4       	brne	.+6      	; 0x83a <__addsf3+0x24>
     834:	26 f4       	brtc	.+8      	; 0x83e <__addsf3+0x28>
     836:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__fp_nan>
     83a:	0e f4       	brtc	.+2      	; 0x83e <__addsf3+0x28>
     83c:	e0 95       	com	r30
     83e:	e7 fb       	bst	r30, 7
     840:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <__fp_inf>

00000844 <__addsf3x>:
     844:	e9 2f       	mov	r30, r25
     846:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__fp_split3>
     84a:	58 f3       	brcs	.-42     	; 0x822 <__addsf3+0xc>
     84c:	ba 17       	cp	r27, r26
     84e:	62 07       	cpc	r22, r18
     850:	73 07       	cpc	r23, r19
     852:	84 07       	cpc	r24, r20
     854:	95 07       	cpc	r25, r21
     856:	20 f0       	brcs	.+8      	; 0x860 <__addsf3x+0x1c>
     858:	79 f4       	brne	.+30     	; 0x878 <__addsf3x+0x34>
     85a:	a6 f5       	brtc	.+104    	; 0x8c4 <__addsf3x+0x80>
     85c:	0c 94 cf 05 	jmp	0xb9e	; 0xb9e <__fp_zero>
     860:	0e f4       	brtc	.+2      	; 0x864 <__addsf3x+0x20>
     862:	e0 95       	com	r30
     864:	0b 2e       	mov	r0, r27
     866:	ba 2f       	mov	r27, r26
     868:	a0 2d       	mov	r26, r0
     86a:	0b 01       	movw	r0, r22
     86c:	b9 01       	movw	r22, r18
     86e:	90 01       	movw	r18, r0
     870:	0c 01       	movw	r0, r24
     872:	ca 01       	movw	r24, r20
     874:	a0 01       	movw	r20, r0
     876:	11 24       	eor	r1, r1
     878:	ff 27       	eor	r31, r31
     87a:	59 1b       	sub	r21, r25
     87c:	99 f0       	breq	.+38     	; 0x8a4 <__addsf3x+0x60>
     87e:	59 3f       	cpi	r21, 0xF9	; 249
     880:	50 f4       	brcc	.+20     	; 0x896 <__addsf3x+0x52>
     882:	50 3e       	cpi	r21, 0xE0	; 224
     884:	68 f1       	brcs	.+90     	; 0x8e0 <__addsf3x+0x9c>
     886:	1a 16       	cp	r1, r26
     888:	f0 40       	sbci	r31, 0x00	; 0
     88a:	a2 2f       	mov	r26, r18
     88c:	23 2f       	mov	r18, r19
     88e:	34 2f       	mov	r19, r20
     890:	44 27       	eor	r20, r20
     892:	58 5f       	subi	r21, 0xF8	; 248
     894:	f3 cf       	rjmp	.-26     	; 0x87c <__addsf3x+0x38>
     896:	46 95       	lsr	r20
     898:	37 95       	ror	r19
     89a:	27 95       	ror	r18
     89c:	a7 95       	ror	r26
     89e:	f0 40       	sbci	r31, 0x00	; 0
     8a0:	53 95       	inc	r21
     8a2:	c9 f7       	brne	.-14     	; 0x896 <__addsf3x+0x52>
     8a4:	7e f4       	brtc	.+30     	; 0x8c4 <__addsf3x+0x80>
     8a6:	1f 16       	cp	r1, r31
     8a8:	ba 0b       	sbc	r27, r26
     8aa:	62 0b       	sbc	r22, r18
     8ac:	73 0b       	sbc	r23, r19
     8ae:	84 0b       	sbc	r24, r20
     8b0:	ba f0       	brmi	.+46     	; 0x8e0 <__addsf3x+0x9c>
     8b2:	91 50       	subi	r25, 0x01	; 1
     8b4:	a1 f0       	breq	.+40     	; 0x8de <__addsf3x+0x9a>
     8b6:	ff 0f       	add	r31, r31
     8b8:	bb 1f       	adc	r27, r27
     8ba:	66 1f       	adc	r22, r22
     8bc:	77 1f       	adc	r23, r23
     8be:	88 1f       	adc	r24, r24
     8c0:	c2 f7       	brpl	.-16     	; 0x8b2 <__addsf3x+0x6e>
     8c2:	0e c0       	rjmp	.+28     	; 0x8e0 <__addsf3x+0x9c>
     8c4:	ba 0f       	add	r27, r26
     8c6:	62 1f       	adc	r22, r18
     8c8:	73 1f       	adc	r23, r19
     8ca:	84 1f       	adc	r24, r20
     8cc:	48 f4       	brcc	.+18     	; 0x8e0 <__addsf3x+0x9c>
     8ce:	87 95       	ror	r24
     8d0:	77 95       	ror	r23
     8d2:	67 95       	ror	r22
     8d4:	b7 95       	ror	r27
     8d6:	f7 95       	ror	r31
     8d8:	9e 3f       	cpi	r25, 0xFE	; 254
     8da:	08 f0       	brcs	.+2      	; 0x8de <__addsf3x+0x9a>
     8dc:	b0 cf       	rjmp	.-160    	; 0x83e <__addsf3+0x28>
     8de:	93 95       	inc	r25
     8e0:	88 0f       	add	r24, r24
     8e2:	08 f0       	brcs	.+2      	; 0x8e6 <__addsf3x+0xa2>
     8e4:	99 27       	eor	r25, r25
     8e6:	ee 0f       	add	r30, r30
     8e8:	97 95       	ror	r25
     8ea:	87 95       	ror	r24
     8ec:	08 95       	ret

000008ee <__cmpsf2>:
     8ee:	0e 94 61 05 	call	0xac2	; 0xac2 <__fp_cmp>
     8f2:	08 f4       	brcc	.+2      	; 0x8f6 <__cmpsf2+0x8>
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	08 95       	ret

000008f8 <__divsf3>:
     8f8:	0e 94 90 04 	call	0x920	; 0x920 <__divsf3x>
     8fc:	0c 94 9c 05 	jmp	0xb38	; 0xb38 <__fp_round>
     900:	0e 94 95 05 	call	0xb2a	; 0xb2a <__fp_pscB>
     904:	58 f0       	brcs	.+22     	; 0x91c <__stack+0x1d>
     906:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__fp_pscA>
     90a:	40 f0       	brcs	.+16     	; 0x91c <__stack+0x1d>
     90c:	29 f4       	brne	.+10     	; 0x918 <__stack+0x19>
     90e:	5f 3f       	cpi	r21, 0xFF	; 255
     910:	29 f0       	breq	.+10     	; 0x91c <__stack+0x1d>
     912:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <__fp_inf>
     916:	51 11       	cpse	r21, r1
     918:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__fp_szero>
     91c:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__fp_nan>

00000920 <__divsf3x>:
     920:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__fp_split3>
     924:	68 f3       	brcs	.-38     	; 0x900 <__stack+0x1>

00000926 <__divsf3_pse>:
     926:	99 23       	and	r25, r25
     928:	b1 f3       	breq	.-20     	; 0x916 <__stack+0x17>
     92a:	55 23       	and	r21, r21
     92c:	91 f3       	breq	.-28     	; 0x912 <__stack+0x13>
     92e:	95 1b       	sub	r25, r21
     930:	55 0b       	sbc	r21, r21
     932:	bb 27       	eor	r27, r27
     934:	aa 27       	eor	r26, r26
     936:	62 17       	cp	r22, r18
     938:	73 07       	cpc	r23, r19
     93a:	84 07       	cpc	r24, r20
     93c:	38 f0       	brcs	.+14     	; 0x94c <__divsf3_pse+0x26>
     93e:	9f 5f       	subi	r25, 0xFF	; 255
     940:	5f 4f       	sbci	r21, 0xFF	; 255
     942:	22 0f       	add	r18, r18
     944:	33 1f       	adc	r19, r19
     946:	44 1f       	adc	r20, r20
     948:	aa 1f       	adc	r26, r26
     94a:	a9 f3       	breq	.-22     	; 0x936 <__divsf3_pse+0x10>
     94c:	35 d0       	rcall	.+106    	; 0x9b8 <__divsf3_pse+0x92>
     94e:	0e 2e       	mov	r0, r30
     950:	3a f0       	brmi	.+14     	; 0x960 <__divsf3_pse+0x3a>
     952:	e0 e8       	ldi	r30, 0x80	; 128
     954:	32 d0       	rcall	.+100    	; 0x9ba <__divsf3_pse+0x94>
     956:	91 50       	subi	r25, 0x01	; 1
     958:	50 40       	sbci	r21, 0x00	; 0
     95a:	e6 95       	lsr	r30
     95c:	00 1c       	adc	r0, r0
     95e:	ca f7       	brpl	.-14     	; 0x952 <__divsf3_pse+0x2c>
     960:	2b d0       	rcall	.+86     	; 0x9b8 <__divsf3_pse+0x92>
     962:	fe 2f       	mov	r31, r30
     964:	29 d0       	rcall	.+82     	; 0x9b8 <__divsf3_pse+0x92>
     966:	66 0f       	add	r22, r22
     968:	77 1f       	adc	r23, r23
     96a:	88 1f       	adc	r24, r24
     96c:	bb 1f       	adc	r27, r27
     96e:	26 17       	cp	r18, r22
     970:	37 07       	cpc	r19, r23
     972:	48 07       	cpc	r20, r24
     974:	ab 07       	cpc	r26, r27
     976:	b0 e8       	ldi	r27, 0x80	; 128
     978:	09 f0       	breq	.+2      	; 0x97c <__divsf3_pse+0x56>
     97a:	bb 0b       	sbc	r27, r27
     97c:	80 2d       	mov	r24, r0
     97e:	bf 01       	movw	r22, r30
     980:	ff 27       	eor	r31, r31
     982:	93 58       	subi	r25, 0x83	; 131
     984:	5f 4f       	sbci	r21, 0xFF	; 255
     986:	3a f0       	brmi	.+14     	; 0x996 <__divsf3_pse+0x70>
     988:	9e 3f       	cpi	r25, 0xFE	; 254
     98a:	51 05       	cpc	r21, r1
     98c:	78 f0       	brcs	.+30     	; 0x9ac <__divsf3_pse+0x86>
     98e:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <__fp_inf>
     992:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__fp_szero>
     996:	5f 3f       	cpi	r21, 0xFF	; 255
     998:	e4 f3       	brlt	.-8      	; 0x992 <__divsf3_pse+0x6c>
     99a:	98 3e       	cpi	r25, 0xE8	; 232
     99c:	d4 f3       	brlt	.-12     	; 0x992 <__divsf3_pse+0x6c>
     99e:	86 95       	lsr	r24
     9a0:	77 95       	ror	r23
     9a2:	67 95       	ror	r22
     9a4:	b7 95       	ror	r27
     9a6:	f7 95       	ror	r31
     9a8:	9f 5f       	subi	r25, 0xFF	; 255
     9aa:	c9 f7       	brne	.-14     	; 0x99e <__divsf3_pse+0x78>
     9ac:	88 0f       	add	r24, r24
     9ae:	91 1d       	adc	r25, r1
     9b0:	96 95       	lsr	r25
     9b2:	87 95       	ror	r24
     9b4:	97 f9       	bld	r25, 7
     9b6:	08 95       	ret
     9b8:	e1 e0       	ldi	r30, 0x01	; 1
     9ba:	66 0f       	add	r22, r22
     9bc:	77 1f       	adc	r23, r23
     9be:	88 1f       	adc	r24, r24
     9c0:	bb 1f       	adc	r27, r27
     9c2:	62 17       	cp	r22, r18
     9c4:	73 07       	cpc	r23, r19
     9c6:	84 07       	cpc	r24, r20
     9c8:	ba 07       	cpc	r27, r26
     9ca:	20 f0       	brcs	.+8      	; 0x9d4 <__divsf3_pse+0xae>
     9cc:	62 1b       	sub	r22, r18
     9ce:	73 0b       	sbc	r23, r19
     9d0:	84 0b       	sbc	r24, r20
     9d2:	ba 0b       	sbc	r27, r26
     9d4:	ee 1f       	adc	r30, r30
     9d6:	88 f7       	brcc	.-30     	; 0x9ba <__divsf3_pse+0x94>
     9d8:	e0 95       	com	r30
     9da:	08 95       	ret

000009dc <__fixsfsi>:
     9dc:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__fixunssfsi>
     9e0:	68 94       	set
     9e2:	b1 11       	cpse	r27, r1
     9e4:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__fp_szero>
     9e8:	08 95       	ret

000009ea <__fixunssfsi>:
     9ea:	0e 94 b5 05 	call	0xb6a	; 0xb6a <__fp_splitA>
     9ee:	88 f0       	brcs	.+34     	; 0xa12 <__fixunssfsi+0x28>
     9f0:	9f 57       	subi	r25, 0x7F	; 127
     9f2:	98 f0       	brcs	.+38     	; 0xa1a <__fixunssfsi+0x30>
     9f4:	b9 2f       	mov	r27, r25
     9f6:	99 27       	eor	r25, r25
     9f8:	b7 51       	subi	r27, 0x17	; 23
     9fa:	b0 f0       	brcs	.+44     	; 0xa28 <__fixunssfsi+0x3e>
     9fc:	e1 f0       	breq	.+56     	; 0xa36 <__fixunssfsi+0x4c>
     9fe:	66 0f       	add	r22, r22
     a00:	77 1f       	adc	r23, r23
     a02:	88 1f       	adc	r24, r24
     a04:	99 1f       	adc	r25, r25
     a06:	1a f0       	brmi	.+6      	; 0xa0e <__fixunssfsi+0x24>
     a08:	ba 95       	dec	r27
     a0a:	c9 f7       	brne	.-14     	; 0x9fe <__fixunssfsi+0x14>
     a0c:	14 c0       	rjmp	.+40     	; 0xa36 <__fixunssfsi+0x4c>
     a0e:	b1 30       	cpi	r27, 0x01	; 1
     a10:	91 f0       	breq	.+36     	; 0xa36 <__fixunssfsi+0x4c>
     a12:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fp_zero>
     a16:	b1 e0       	ldi	r27, 0x01	; 1
     a18:	08 95       	ret
     a1a:	0c 94 cf 05 	jmp	0xb9e	; 0xb9e <__fp_zero>
     a1e:	67 2f       	mov	r22, r23
     a20:	78 2f       	mov	r23, r24
     a22:	88 27       	eor	r24, r24
     a24:	b8 5f       	subi	r27, 0xF8	; 248
     a26:	39 f0       	breq	.+14     	; 0xa36 <__fixunssfsi+0x4c>
     a28:	b9 3f       	cpi	r27, 0xF9	; 249
     a2a:	cc f3       	brlt	.-14     	; 0xa1e <__fixunssfsi+0x34>
     a2c:	86 95       	lsr	r24
     a2e:	77 95       	ror	r23
     a30:	67 95       	ror	r22
     a32:	b3 95       	inc	r27
     a34:	d9 f7       	brne	.-10     	; 0xa2c <__fixunssfsi+0x42>
     a36:	3e f4       	brtc	.+14     	; 0xa46 <__fixunssfsi+0x5c>
     a38:	90 95       	com	r25
     a3a:	80 95       	com	r24
     a3c:	70 95       	com	r23
     a3e:	61 95       	neg	r22
     a40:	7f 4f       	sbci	r23, 0xFF	; 255
     a42:	8f 4f       	sbci	r24, 0xFF	; 255
     a44:	9f 4f       	sbci	r25, 0xFF	; 255
     a46:	08 95       	ret

00000a48 <__floatunsisf>:
     a48:	e8 94       	clt
     a4a:	09 c0       	rjmp	.+18     	; 0xa5e <__floatsisf+0x12>

00000a4c <__floatsisf>:
     a4c:	97 fb       	bst	r25, 7
     a4e:	3e f4       	brtc	.+14     	; 0xa5e <__floatsisf+0x12>
     a50:	90 95       	com	r25
     a52:	80 95       	com	r24
     a54:	70 95       	com	r23
     a56:	61 95       	neg	r22
     a58:	7f 4f       	sbci	r23, 0xFF	; 255
     a5a:	8f 4f       	sbci	r24, 0xFF	; 255
     a5c:	9f 4f       	sbci	r25, 0xFF	; 255
     a5e:	99 23       	and	r25, r25
     a60:	a9 f0       	breq	.+42     	; 0xa8c <__floatsisf+0x40>
     a62:	f9 2f       	mov	r31, r25
     a64:	96 e9       	ldi	r25, 0x96	; 150
     a66:	bb 27       	eor	r27, r27
     a68:	93 95       	inc	r25
     a6a:	f6 95       	lsr	r31
     a6c:	87 95       	ror	r24
     a6e:	77 95       	ror	r23
     a70:	67 95       	ror	r22
     a72:	b7 95       	ror	r27
     a74:	f1 11       	cpse	r31, r1
     a76:	f8 cf       	rjmp	.-16     	; 0xa68 <__floatsisf+0x1c>
     a78:	fa f4       	brpl	.+62     	; 0xab8 <__floatsisf+0x6c>
     a7a:	bb 0f       	add	r27, r27
     a7c:	11 f4       	brne	.+4      	; 0xa82 <__floatsisf+0x36>
     a7e:	60 ff       	sbrs	r22, 0
     a80:	1b c0       	rjmp	.+54     	; 0xab8 <__floatsisf+0x6c>
     a82:	6f 5f       	subi	r22, 0xFF	; 255
     a84:	7f 4f       	sbci	r23, 0xFF	; 255
     a86:	8f 4f       	sbci	r24, 0xFF	; 255
     a88:	9f 4f       	sbci	r25, 0xFF	; 255
     a8a:	16 c0       	rjmp	.+44     	; 0xab8 <__floatsisf+0x6c>
     a8c:	88 23       	and	r24, r24
     a8e:	11 f0       	breq	.+4      	; 0xa94 <__floatsisf+0x48>
     a90:	96 e9       	ldi	r25, 0x96	; 150
     a92:	11 c0       	rjmp	.+34     	; 0xab6 <__floatsisf+0x6a>
     a94:	77 23       	and	r23, r23
     a96:	21 f0       	breq	.+8      	; 0xaa0 <__floatsisf+0x54>
     a98:	9e e8       	ldi	r25, 0x8E	; 142
     a9a:	87 2f       	mov	r24, r23
     a9c:	76 2f       	mov	r23, r22
     a9e:	05 c0       	rjmp	.+10     	; 0xaaa <__floatsisf+0x5e>
     aa0:	66 23       	and	r22, r22
     aa2:	71 f0       	breq	.+28     	; 0xac0 <__floatsisf+0x74>
     aa4:	96 e8       	ldi	r25, 0x86	; 134
     aa6:	86 2f       	mov	r24, r22
     aa8:	70 e0       	ldi	r23, 0x00	; 0
     aaa:	60 e0       	ldi	r22, 0x00	; 0
     aac:	2a f0       	brmi	.+10     	; 0xab8 <__floatsisf+0x6c>
     aae:	9a 95       	dec	r25
     ab0:	66 0f       	add	r22, r22
     ab2:	77 1f       	adc	r23, r23
     ab4:	88 1f       	adc	r24, r24
     ab6:	da f7       	brpl	.-10     	; 0xaae <__floatsisf+0x62>
     ab8:	88 0f       	add	r24, r24
     aba:	96 95       	lsr	r25
     abc:	87 95       	ror	r24
     abe:	97 f9       	bld	r25, 7
     ac0:	08 95       	ret

00000ac2 <__fp_cmp>:
     ac2:	99 0f       	add	r25, r25
     ac4:	00 08       	sbc	r0, r0
     ac6:	55 0f       	add	r21, r21
     ac8:	aa 0b       	sbc	r26, r26
     aca:	e0 e8       	ldi	r30, 0x80	; 128
     acc:	fe ef       	ldi	r31, 0xFE	; 254
     ace:	16 16       	cp	r1, r22
     ad0:	17 06       	cpc	r1, r23
     ad2:	e8 07       	cpc	r30, r24
     ad4:	f9 07       	cpc	r31, r25
     ad6:	c0 f0       	brcs	.+48     	; 0xb08 <__fp_cmp+0x46>
     ad8:	12 16       	cp	r1, r18
     ada:	13 06       	cpc	r1, r19
     adc:	e4 07       	cpc	r30, r20
     ade:	f5 07       	cpc	r31, r21
     ae0:	98 f0       	brcs	.+38     	; 0xb08 <__fp_cmp+0x46>
     ae2:	62 1b       	sub	r22, r18
     ae4:	73 0b       	sbc	r23, r19
     ae6:	84 0b       	sbc	r24, r20
     ae8:	95 0b       	sbc	r25, r21
     aea:	39 f4       	brne	.+14     	; 0xafa <__fp_cmp+0x38>
     aec:	0a 26       	eor	r0, r26
     aee:	61 f0       	breq	.+24     	; 0xb08 <__fp_cmp+0x46>
     af0:	23 2b       	or	r18, r19
     af2:	24 2b       	or	r18, r20
     af4:	25 2b       	or	r18, r21
     af6:	21 f4       	brne	.+8      	; 0xb00 <__fp_cmp+0x3e>
     af8:	08 95       	ret
     afa:	0a 26       	eor	r0, r26
     afc:	09 f4       	brne	.+2      	; 0xb00 <__fp_cmp+0x3e>
     afe:	a1 40       	sbci	r26, 0x01	; 1
     b00:	a6 95       	lsr	r26
     b02:	8f ef       	ldi	r24, 0xFF	; 255
     b04:	81 1d       	adc	r24, r1
     b06:	81 1d       	adc	r24, r1
     b08:	08 95       	ret

00000b0a <__fp_inf>:
     b0a:	97 f9       	bld	r25, 7
     b0c:	9f 67       	ori	r25, 0x7F	; 127
     b0e:	80 e8       	ldi	r24, 0x80	; 128
     b10:	70 e0       	ldi	r23, 0x00	; 0
     b12:	60 e0       	ldi	r22, 0x00	; 0
     b14:	08 95       	ret

00000b16 <__fp_nan>:
     b16:	9f ef       	ldi	r25, 0xFF	; 255
     b18:	80 ec       	ldi	r24, 0xC0	; 192
     b1a:	08 95       	ret

00000b1c <__fp_pscA>:
     b1c:	00 24       	eor	r0, r0
     b1e:	0a 94       	dec	r0
     b20:	16 16       	cp	r1, r22
     b22:	17 06       	cpc	r1, r23
     b24:	18 06       	cpc	r1, r24
     b26:	09 06       	cpc	r0, r25
     b28:	08 95       	ret

00000b2a <__fp_pscB>:
     b2a:	00 24       	eor	r0, r0
     b2c:	0a 94       	dec	r0
     b2e:	12 16       	cp	r1, r18
     b30:	13 06       	cpc	r1, r19
     b32:	14 06       	cpc	r1, r20
     b34:	05 06       	cpc	r0, r21
     b36:	08 95       	ret

00000b38 <__fp_round>:
     b38:	09 2e       	mov	r0, r25
     b3a:	03 94       	inc	r0
     b3c:	00 0c       	add	r0, r0
     b3e:	11 f4       	brne	.+4      	; 0xb44 <__fp_round+0xc>
     b40:	88 23       	and	r24, r24
     b42:	52 f0       	brmi	.+20     	; 0xb58 <__fp_round+0x20>
     b44:	bb 0f       	add	r27, r27
     b46:	40 f4       	brcc	.+16     	; 0xb58 <__fp_round+0x20>
     b48:	bf 2b       	or	r27, r31
     b4a:	11 f4       	brne	.+4      	; 0xb50 <__fp_round+0x18>
     b4c:	60 ff       	sbrs	r22, 0
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__fp_round+0x20>
     b50:	6f 5f       	subi	r22, 0xFF	; 255
     b52:	7f 4f       	sbci	r23, 0xFF	; 255
     b54:	8f 4f       	sbci	r24, 0xFF	; 255
     b56:	9f 4f       	sbci	r25, 0xFF	; 255
     b58:	08 95       	ret

00000b5a <__fp_split3>:
     b5a:	57 fd       	sbrc	r21, 7
     b5c:	90 58       	subi	r25, 0x80	; 128
     b5e:	44 0f       	add	r20, r20
     b60:	55 1f       	adc	r21, r21
     b62:	59 f0       	breq	.+22     	; 0xb7a <__fp_splitA+0x10>
     b64:	5f 3f       	cpi	r21, 0xFF	; 255
     b66:	71 f0       	breq	.+28     	; 0xb84 <__fp_splitA+0x1a>
     b68:	47 95       	ror	r20

00000b6a <__fp_splitA>:
     b6a:	88 0f       	add	r24, r24
     b6c:	97 fb       	bst	r25, 7
     b6e:	99 1f       	adc	r25, r25
     b70:	61 f0       	breq	.+24     	; 0xb8a <__fp_splitA+0x20>
     b72:	9f 3f       	cpi	r25, 0xFF	; 255
     b74:	79 f0       	breq	.+30     	; 0xb94 <__fp_splitA+0x2a>
     b76:	87 95       	ror	r24
     b78:	08 95       	ret
     b7a:	12 16       	cp	r1, r18
     b7c:	13 06       	cpc	r1, r19
     b7e:	14 06       	cpc	r1, r20
     b80:	55 1f       	adc	r21, r21
     b82:	f2 cf       	rjmp	.-28     	; 0xb68 <__fp_split3+0xe>
     b84:	46 95       	lsr	r20
     b86:	f1 df       	rcall	.-30     	; 0xb6a <__fp_splitA>
     b88:	08 c0       	rjmp	.+16     	; 0xb9a <__fp_splitA+0x30>
     b8a:	16 16       	cp	r1, r22
     b8c:	17 06       	cpc	r1, r23
     b8e:	18 06       	cpc	r1, r24
     b90:	99 1f       	adc	r25, r25
     b92:	f1 cf       	rjmp	.-30     	; 0xb76 <__fp_splitA+0xc>
     b94:	86 95       	lsr	r24
     b96:	71 05       	cpc	r23, r1
     b98:	61 05       	cpc	r22, r1
     b9a:	08 94       	sec
     b9c:	08 95       	ret

00000b9e <__fp_zero>:
     b9e:	e8 94       	clt

00000ba0 <__fp_szero>:
     ba0:	bb 27       	eor	r27, r27
     ba2:	66 27       	eor	r22, r22
     ba4:	77 27       	eor	r23, r23
     ba6:	cb 01       	movw	r24, r22
     ba8:	97 f9       	bld	r25, 7
     baa:	08 95       	ret

00000bac <__gesf2>:
     bac:	0e 94 61 05 	call	0xac2	; 0xac2 <__fp_cmp>
     bb0:	08 f4       	brcc	.+2      	; 0xbb4 <__gesf2+0x8>
     bb2:	8f ef       	ldi	r24, 0xFF	; 255
     bb4:	08 95       	ret

00000bb6 <__mulsf3>:
     bb6:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__mulsf3x>
     bba:	0c 94 9c 05 	jmp	0xb38	; 0xb38 <__fp_round>
     bbe:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__fp_pscA>
     bc2:	38 f0       	brcs	.+14     	; 0xbd2 <__mulsf3+0x1c>
     bc4:	0e 94 95 05 	call	0xb2a	; 0xb2a <__fp_pscB>
     bc8:	20 f0       	brcs	.+8      	; 0xbd2 <__mulsf3+0x1c>
     bca:	95 23       	and	r25, r21
     bcc:	11 f0       	breq	.+4      	; 0xbd2 <__mulsf3+0x1c>
     bce:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <__fp_inf>
     bd2:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__fp_nan>
     bd6:	11 24       	eor	r1, r1
     bd8:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__fp_szero>

00000bdc <__mulsf3x>:
     bdc:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__fp_split3>
     be0:	70 f3       	brcs	.-36     	; 0xbbe <__mulsf3+0x8>

00000be2 <__mulsf3_pse>:
     be2:	95 9f       	mul	r25, r21
     be4:	c1 f3       	breq	.-16     	; 0xbd6 <__mulsf3+0x20>
     be6:	95 0f       	add	r25, r21
     be8:	50 e0       	ldi	r21, 0x00	; 0
     bea:	55 1f       	adc	r21, r21
     bec:	62 9f       	mul	r22, r18
     bee:	f0 01       	movw	r30, r0
     bf0:	72 9f       	mul	r23, r18
     bf2:	bb 27       	eor	r27, r27
     bf4:	f0 0d       	add	r31, r0
     bf6:	b1 1d       	adc	r27, r1
     bf8:	63 9f       	mul	r22, r19
     bfa:	aa 27       	eor	r26, r26
     bfc:	f0 0d       	add	r31, r0
     bfe:	b1 1d       	adc	r27, r1
     c00:	aa 1f       	adc	r26, r26
     c02:	64 9f       	mul	r22, r20
     c04:	66 27       	eor	r22, r22
     c06:	b0 0d       	add	r27, r0
     c08:	a1 1d       	adc	r26, r1
     c0a:	66 1f       	adc	r22, r22
     c0c:	82 9f       	mul	r24, r18
     c0e:	22 27       	eor	r18, r18
     c10:	b0 0d       	add	r27, r0
     c12:	a1 1d       	adc	r26, r1
     c14:	62 1f       	adc	r22, r18
     c16:	73 9f       	mul	r23, r19
     c18:	b0 0d       	add	r27, r0
     c1a:	a1 1d       	adc	r26, r1
     c1c:	62 1f       	adc	r22, r18
     c1e:	83 9f       	mul	r24, r19
     c20:	a0 0d       	add	r26, r0
     c22:	61 1d       	adc	r22, r1
     c24:	22 1f       	adc	r18, r18
     c26:	74 9f       	mul	r23, r20
     c28:	33 27       	eor	r19, r19
     c2a:	a0 0d       	add	r26, r0
     c2c:	61 1d       	adc	r22, r1
     c2e:	23 1f       	adc	r18, r19
     c30:	84 9f       	mul	r24, r20
     c32:	60 0d       	add	r22, r0
     c34:	21 1d       	adc	r18, r1
     c36:	82 2f       	mov	r24, r18
     c38:	76 2f       	mov	r23, r22
     c3a:	6a 2f       	mov	r22, r26
     c3c:	11 24       	eor	r1, r1
     c3e:	9f 57       	subi	r25, 0x7F	; 127
     c40:	50 40       	sbci	r21, 0x00	; 0
     c42:	9a f0       	brmi	.+38     	; 0xc6a <__mulsf3_pse+0x88>
     c44:	f1 f0       	breq	.+60     	; 0xc82 <__mulsf3_pse+0xa0>
     c46:	88 23       	and	r24, r24
     c48:	4a f0       	brmi	.+18     	; 0xc5c <__mulsf3_pse+0x7a>
     c4a:	ee 0f       	add	r30, r30
     c4c:	ff 1f       	adc	r31, r31
     c4e:	bb 1f       	adc	r27, r27
     c50:	66 1f       	adc	r22, r22
     c52:	77 1f       	adc	r23, r23
     c54:	88 1f       	adc	r24, r24
     c56:	91 50       	subi	r25, 0x01	; 1
     c58:	50 40       	sbci	r21, 0x00	; 0
     c5a:	a9 f7       	brne	.-22     	; 0xc46 <__mulsf3_pse+0x64>
     c5c:	9e 3f       	cpi	r25, 0xFE	; 254
     c5e:	51 05       	cpc	r21, r1
     c60:	80 f0       	brcs	.+32     	; 0xc82 <__mulsf3_pse+0xa0>
     c62:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <__fp_inf>
     c66:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__fp_szero>
     c6a:	5f 3f       	cpi	r21, 0xFF	; 255
     c6c:	e4 f3       	brlt	.-8      	; 0xc66 <__mulsf3_pse+0x84>
     c6e:	98 3e       	cpi	r25, 0xE8	; 232
     c70:	d4 f3       	brlt	.-12     	; 0xc66 <__mulsf3_pse+0x84>
     c72:	86 95       	lsr	r24
     c74:	77 95       	ror	r23
     c76:	67 95       	ror	r22
     c78:	b7 95       	ror	r27
     c7a:	f7 95       	ror	r31
     c7c:	e7 95       	ror	r30
     c7e:	9f 5f       	subi	r25, 0xFF	; 255
     c80:	c1 f7       	brne	.-16     	; 0xc72 <__mulsf3_pse+0x90>
     c82:	fe 2b       	or	r31, r30
     c84:	88 0f       	add	r24, r24
     c86:	91 1d       	adc	r25, r1
     c88:	96 95       	lsr	r25
     c8a:	87 95       	ror	r24
     c8c:	97 f9       	bld	r25, 7
     c8e:	08 95       	ret

00000c90 <vfprintf>:
     c90:	a0 e1       	ldi	r26, 0x10	; 16
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	ee e4       	ldi	r30, 0x4E	; 78
     c96:	f6 e0       	ldi	r31, 0x06	; 6
     c98:	0c 94 c5 09 	jmp	0x138a	; 0x138a <__prologue_saves__>
     c9c:	7c 01       	movw	r14, r24
     c9e:	1b 01       	movw	r2, r22
     ca0:	6a 01       	movw	r12, r20
     ca2:	fc 01       	movw	r30, r24
     ca4:	17 82       	std	Z+7, r1	; 0x07
     ca6:	16 82       	std	Z+6, r1	; 0x06
     ca8:	83 81       	ldd	r24, Z+3	; 0x03
     caa:	81 ff       	sbrs	r24, 1
     cac:	44 c3       	rjmp	.+1672   	; 0x1336 <vfprintf+0x6a6>
     cae:	9e 01       	movw	r18, r28
     cb0:	2f 5f       	subi	r18, 0xFF	; 255
     cb2:	3f 4f       	sbci	r19, 0xFF	; 255
     cb4:	39 01       	movw	r6, r18
     cb6:	f7 01       	movw	r30, r14
     cb8:	93 81       	ldd	r25, Z+3	; 0x03
     cba:	f1 01       	movw	r30, r2
     cbc:	93 fd       	sbrc	r25, 3
     cbe:	85 91       	lpm	r24, Z+
     cc0:	93 ff       	sbrs	r25, 3
     cc2:	81 91       	ld	r24, Z+
     cc4:	1f 01       	movw	r2, r30
     cc6:	88 23       	and	r24, r24
     cc8:	09 f4       	brne	.+2      	; 0xccc <vfprintf+0x3c>
     cca:	31 c3       	rjmp	.+1634   	; 0x132e <vfprintf+0x69e>
     ccc:	85 32       	cpi	r24, 0x25	; 37
     cce:	39 f4       	brne	.+14     	; 0xcde <vfprintf+0x4e>
     cd0:	93 fd       	sbrc	r25, 3
     cd2:	85 91       	lpm	r24, Z+
     cd4:	93 ff       	sbrs	r25, 3
     cd6:	81 91       	ld	r24, Z+
     cd8:	1f 01       	movw	r2, r30
     cda:	85 32       	cpi	r24, 0x25	; 37
     cdc:	39 f4       	brne	.+14     	; 0xcec <vfprintf+0x5c>
     cde:	b7 01       	movw	r22, r14
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	0e 94 1f 0b 	call	0x163e	; 0x163e <fputc>
     ce6:	56 01       	movw	r10, r12
     ce8:	65 01       	movw	r12, r10
     cea:	e5 cf       	rjmp	.-54     	; 0xcb6 <vfprintf+0x26>
     cec:	10 e0       	ldi	r17, 0x00	; 0
     cee:	51 2c       	mov	r5, r1
     cf0:	91 2c       	mov	r9, r1
     cf2:	ff e1       	ldi	r31, 0x1F	; 31
     cf4:	f9 15       	cp	r31, r9
     cf6:	d8 f0       	brcs	.+54     	; 0xd2e <vfprintf+0x9e>
     cf8:	8b 32       	cpi	r24, 0x2B	; 43
     cfa:	79 f0       	breq	.+30     	; 0xd1a <vfprintf+0x8a>
     cfc:	38 f4       	brcc	.+14     	; 0xd0c <vfprintf+0x7c>
     cfe:	80 32       	cpi	r24, 0x20	; 32
     d00:	79 f0       	breq	.+30     	; 0xd20 <vfprintf+0x90>
     d02:	83 32       	cpi	r24, 0x23	; 35
     d04:	a1 f4       	brne	.+40     	; 0xd2e <vfprintf+0x9e>
     d06:	f9 2d       	mov	r31, r9
     d08:	f0 61       	ori	r31, 0x10	; 16
     d0a:	2e c0       	rjmp	.+92     	; 0xd68 <vfprintf+0xd8>
     d0c:	8d 32       	cpi	r24, 0x2D	; 45
     d0e:	61 f0       	breq	.+24     	; 0xd28 <vfprintf+0x98>
     d10:	80 33       	cpi	r24, 0x30	; 48
     d12:	69 f4       	brne	.+26     	; 0xd2e <vfprintf+0x9e>
     d14:	29 2d       	mov	r18, r9
     d16:	21 60       	ori	r18, 0x01	; 1
     d18:	2d c0       	rjmp	.+90     	; 0xd74 <vfprintf+0xe4>
     d1a:	39 2d       	mov	r19, r9
     d1c:	32 60       	ori	r19, 0x02	; 2
     d1e:	93 2e       	mov	r9, r19
     d20:	89 2d       	mov	r24, r9
     d22:	84 60       	ori	r24, 0x04	; 4
     d24:	98 2e       	mov	r9, r24
     d26:	2a c0       	rjmp	.+84     	; 0xd7c <vfprintf+0xec>
     d28:	e9 2d       	mov	r30, r9
     d2a:	e8 60       	ori	r30, 0x08	; 8
     d2c:	15 c0       	rjmp	.+42     	; 0xd58 <vfprintf+0xc8>
     d2e:	97 fc       	sbrc	r9, 7
     d30:	2d c0       	rjmp	.+90     	; 0xd8c <vfprintf+0xfc>
     d32:	20 ed       	ldi	r18, 0xD0	; 208
     d34:	28 0f       	add	r18, r24
     d36:	2a 30       	cpi	r18, 0x0A	; 10
     d38:	88 f4       	brcc	.+34     	; 0xd5c <vfprintf+0xcc>
     d3a:	96 fe       	sbrs	r9, 6
     d3c:	06 c0       	rjmp	.+12     	; 0xd4a <vfprintf+0xba>
     d3e:	3a e0       	ldi	r19, 0x0A	; 10
     d40:	13 9f       	mul	r17, r19
     d42:	20 0d       	add	r18, r0
     d44:	11 24       	eor	r1, r1
     d46:	12 2f       	mov	r17, r18
     d48:	19 c0       	rjmp	.+50     	; 0xd7c <vfprintf+0xec>
     d4a:	8a e0       	ldi	r24, 0x0A	; 10
     d4c:	58 9e       	mul	r5, r24
     d4e:	20 0d       	add	r18, r0
     d50:	11 24       	eor	r1, r1
     d52:	52 2e       	mov	r5, r18
     d54:	e9 2d       	mov	r30, r9
     d56:	e0 62       	ori	r30, 0x20	; 32
     d58:	9e 2e       	mov	r9, r30
     d5a:	10 c0       	rjmp	.+32     	; 0xd7c <vfprintf+0xec>
     d5c:	8e 32       	cpi	r24, 0x2E	; 46
     d5e:	31 f4       	brne	.+12     	; 0xd6c <vfprintf+0xdc>
     d60:	96 fc       	sbrc	r9, 6
     d62:	e5 c2       	rjmp	.+1482   	; 0x132e <vfprintf+0x69e>
     d64:	f9 2d       	mov	r31, r9
     d66:	f0 64       	ori	r31, 0x40	; 64
     d68:	9f 2e       	mov	r9, r31
     d6a:	08 c0       	rjmp	.+16     	; 0xd7c <vfprintf+0xec>
     d6c:	8c 36       	cpi	r24, 0x6C	; 108
     d6e:	21 f4       	brne	.+8      	; 0xd78 <vfprintf+0xe8>
     d70:	29 2d       	mov	r18, r9
     d72:	20 68       	ori	r18, 0x80	; 128
     d74:	92 2e       	mov	r9, r18
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <vfprintf+0xec>
     d78:	88 36       	cpi	r24, 0x68	; 104
     d7a:	41 f4       	brne	.+16     	; 0xd8c <vfprintf+0xfc>
     d7c:	f1 01       	movw	r30, r2
     d7e:	93 fd       	sbrc	r25, 3
     d80:	85 91       	lpm	r24, Z+
     d82:	93 ff       	sbrs	r25, 3
     d84:	81 91       	ld	r24, Z+
     d86:	1f 01       	movw	r2, r30
     d88:	81 11       	cpse	r24, r1
     d8a:	b3 cf       	rjmp	.-154    	; 0xcf2 <vfprintf+0x62>
     d8c:	9b eb       	ldi	r25, 0xBB	; 187
     d8e:	98 0f       	add	r25, r24
     d90:	93 30       	cpi	r25, 0x03	; 3
     d92:	20 f4       	brcc	.+8      	; 0xd9c <vfprintf+0x10c>
     d94:	99 2d       	mov	r25, r9
     d96:	90 61       	ori	r25, 0x10	; 16
     d98:	80 5e       	subi	r24, 0xE0	; 224
     d9a:	07 c0       	rjmp	.+14     	; 0xdaa <vfprintf+0x11a>
     d9c:	9b e9       	ldi	r25, 0x9B	; 155
     d9e:	98 0f       	add	r25, r24
     da0:	93 30       	cpi	r25, 0x03	; 3
     da2:	08 f0       	brcs	.+2      	; 0xda6 <vfprintf+0x116>
     da4:	66 c1       	rjmp	.+716    	; 0x1072 <vfprintf+0x3e2>
     da6:	99 2d       	mov	r25, r9
     da8:	9f 7e       	andi	r25, 0xEF	; 239
     daa:	96 ff       	sbrs	r25, 6
     dac:	16 e0       	ldi	r17, 0x06	; 6
     dae:	9f 73       	andi	r25, 0x3F	; 63
     db0:	99 2e       	mov	r9, r25
     db2:	85 36       	cpi	r24, 0x65	; 101
     db4:	19 f4       	brne	.+6      	; 0xdbc <vfprintf+0x12c>
     db6:	90 64       	ori	r25, 0x40	; 64
     db8:	99 2e       	mov	r9, r25
     dba:	08 c0       	rjmp	.+16     	; 0xdcc <vfprintf+0x13c>
     dbc:	86 36       	cpi	r24, 0x66	; 102
     dbe:	21 f4       	brne	.+8      	; 0xdc8 <vfprintf+0x138>
     dc0:	39 2f       	mov	r19, r25
     dc2:	30 68       	ori	r19, 0x80	; 128
     dc4:	93 2e       	mov	r9, r19
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <vfprintf+0x13c>
     dc8:	11 11       	cpse	r17, r1
     dca:	11 50       	subi	r17, 0x01	; 1
     dcc:	97 fe       	sbrs	r9, 7
     dce:	07 c0       	rjmp	.+14     	; 0xdde <vfprintf+0x14e>
     dd0:	1c 33       	cpi	r17, 0x3C	; 60
     dd2:	50 f4       	brcc	.+20     	; 0xde8 <vfprintf+0x158>
     dd4:	44 24       	eor	r4, r4
     dd6:	43 94       	inc	r4
     dd8:	41 0e       	add	r4, r17
     dda:	27 e0       	ldi	r18, 0x07	; 7
     ddc:	0b c0       	rjmp	.+22     	; 0xdf4 <vfprintf+0x164>
     dde:	18 30       	cpi	r17, 0x08	; 8
     de0:	38 f0       	brcs	.+14     	; 0xdf0 <vfprintf+0x160>
     de2:	27 e0       	ldi	r18, 0x07	; 7
     de4:	17 e0       	ldi	r17, 0x07	; 7
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <vfprintf+0x162>
     de8:	27 e0       	ldi	r18, 0x07	; 7
     dea:	9c e3       	ldi	r25, 0x3C	; 60
     dec:	49 2e       	mov	r4, r25
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <vfprintf+0x164>
     df0:	21 2f       	mov	r18, r17
     df2:	41 2c       	mov	r4, r1
     df4:	56 01       	movw	r10, r12
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	a8 0e       	add	r10, r24
     dfa:	b1 1c       	adc	r11, r1
     dfc:	f6 01       	movw	r30, r12
     dfe:	60 81       	ld	r22, Z
     e00:	71 81       	ldd	r23, Z+1	; 0x01
     e02:	82 81       	ldd	r24, Z+2	; 0x02
     e04:	93 81       	ldd	r25, Z+3	; 0x03
     e06:	04 2d       	mov	r16, r4
     e08:	a3 01       	movw	r20, r6
     e0a:	0e 94 1e 0a 	call	0x143c	; 0x143c <__ftoa_engine>
     e0e:	6c 01       	movw	r12, r24
     e10:	f9 81       	ldd	r31, Y+1	; 0x01
     e12:	fc 87       	std	Y+12, r31	; 0x0c
     e14:	f0 ff       	sbrs	r31, 0
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <vfprintf+0x18c>
     e18:	f3 ff       	sbrs	r31, 3
     e1a:	06 c0       	rjmp	.+12     	; 0xe28 <vfprintf+0x198>
     e1c:	91 fc       	sbrc	r9, 1
     e1e:	06 c0       	rjmp	.+12     	; 0xe2c <vfprintf+0x19c>
     e20:	92 fe       	sbrs	r9, 2
     e22:	06 c0       	rjmp	.+12     	; 0xe30 <vfprintf+0x1a0>
     e24:	00 e2       	ldi	r16, 0x20	; 32
     e26:	05 c0       	rjmp	.+10     	; 0xe32 <vfprintf+0x1a2>
     e28:	0d e2       	ldi	r16, 0x2D	; 45
     e2a:	03 c0       	rjmp	.+6      	; 0xe32 <vfprintf+0x1a2>
     e2c:	0b e2       	ldi	r16, 0x2B	; 43
     e2e:	01 c0       	rjmp	.+2      	; 0xe32 <vfprintf+0x1a2>
     e30:	00 e0       	ldi	r16, 0x00	; 0
     e32:	8c 85       	ldd	r24, Y+12	; 0x0c
     e34:	8c 70       	andi	r24, 0x0C	; 12
     e36:	19 f0       	breq	.+6      	; 0xe3e <vfprintf+0x1ae>
     e38:	01 11       	cpse	r16, r1
     e3a:	5a c2       	rjmp	.+1204   	; 0x12f0 <vfprintf+0x660>
     e3c:	9b c2       	rjmp	.+1334   	; 0x1374 <vfprintf+0x6e4>
     e3e:	97 fe       	sbrs	r9, 7
     e40:	10 c0       	rjmp	.+32     	; 0xe62 <vfprintf+0x1d2>
     e42:	4c 0c       	add	r4, r12
     e44:	fc 85       	ldd	r31, Y+12	; 0x0c
     e46:	f4 ff       	sbrs	r31, 4
     e48:	04 c0       	rjmp	.+8      	; 0xe52 <vfprintf+0x1c2>
     e4a:	8a 81       	ldd	r24, Y+2	; 0x02
     e4c:	81 33       	cpi	r24, 0x31	; 49
     e4e:	09 f4       	brne	.+2      	; 0xe52 <vfprintf+0x1c2>
     e50:	4a 94       	dec	r4
     e52:	14 14       	cp	r1, r4
     e54:	74 f5       	brge	.+92     	; 0xeb2 <vfprintf+0x222>
     e56:	28 e0       	ldi	r18, 0x08	; 8
     e58:	24 15       	cp	r18, r4
     e5a:	78 f5       	brcc	.+94     	; 0xeba <vfprintf+0x22a>
     e5c:	88 e0       	ldi	r24, 0x08	; 8
     e5e:	48 2e       	mov	r4, r24
     e60:	2c c0       	rjmp	.+88     	; 0xeba <vfprintf+0x22a>
     e62:	96 fc       	sbrc	r9, 6
     e64:	2a c0       	rjmp	.+84     	; 0xeba <vfprintf+0x22a>
     e66:	81 2f       	mov	r24, r17
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	8c 15       	cp	r24, r12
     e6c:	9d 05       	cpc	r25, r13
     e6e:	9c f0       	brlt	.+38     	; 0xe96 <vfprintf+0x206>
     e70:	3c ef       	ldi	r19, 0xFC	; 252
     e72:	c3 16       	cp	r12, r19
     e74:	3f ef       	ldi	r19, 0xFF	; 255
     e76:	d3 06       	cpc	r13, r19
     e78:	74 f0       	brlt	.+28     	; 0xe96 <vfprintf+0x206>
     e7a:	89 2d       	mov	r24, r9
     e7c:	80 68       	ori	r24, 0x80	; 128
     e7e:	98 2e       	mov	r9, r24
     e80:	0a c0       	rjmp	.+20     	; 0xe96 <vfprintf+0x206>
     e82:	e2 e0       	ldi	r30, 0x02	; 2
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	ec 0f       	add	r30, r28
     e88:	fd 1f       	adc	r31, r29
     e8a:	e1 0f       	add	r30, r17
     e8c:	f1 1d       	adc	r31, r1
     e8e:	80 81       	ld	r24, Z
     e90:	80 33       	cpi	r24, 0x30	; 48
     e92:	19 f4       	brne	.+6      	; 0xe9a <vfprintf+0x20a>
     e94:	11 50       	subi	r17, 0x01	; 1
     e96:	11 11       	cpse	r17, r1
     e98:	f4 cf       	rjmp	.-24     	; 0xe82 <vfprintf+0x1f2>
     e9a:	97 fe       	sbrs	r9, 7
     e9c:	0e c0       	rjmp	.+28     	; 0xeba <vfprintf+0x22a>
     e9e:	44 24       	eor	r4, r4
     ea0:	43 94       	inc	r4
     ea2:	41 0e       	add	r4, r17
     ea4:	81 2f       	mov	r24, r17
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	c8 16       	cp	r12, r24
     eaa:	d9 06       	cpc	r13, r25
     eac:	2c f4       	brge	.+10     	; 0xeb8 <vfprintf+0x228>
     eae:	1c 19       	sub	r17, r12
     eb0:	04 c0       	rjmp	.+8      	; 0xeba <vfprintf+0x22a>
     eb2:	44 24       	eor	r4, r4
     eb4:	43 94       	inc	r4
     eb6:	01 c0       	rjmp	.+2      	; 0xeba <vfprintf+0x22a>
     eb8:	10 e0       	ldi	r17, 0x00	; 0
     eba:	97 fe       	sbrs	r9, 7
     ebc:	06 c0       	rjmp	.+12     	; 0xeca <vfprintf+0x23a>
     ebe:	1c 14       	cp	r1, r12
     ec0:	1d 04       	cpc	r1, r13
     ec2:	34 f4       	brge	.+12     	; 0xed0 <vfprintf+0x240>
     ec4:	c6 01       	movw	r24, r12
     ec6:	01 96       	adiw	r24, 0x01	; 1
     ec8:	05 c0       	rjmp	.+10     	; 0xed4 <vfprintf+0x244>
     eca:	85 e0       	ldi	r24, 0x05	; 5
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <vfprintf+0x244>
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	01 11       	cpse	r16, r1
     ed6:	01 96       	adiw	r24, 0x01	; 1
     ed8:	11 23       	and	r17, r17
     eda:	31 f0       	breq	.+12     	; 0xee8 <vfprintf+0x258>
     edc:	21 2f       	mov	r18, r17
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	2f 5f       	subi	r18, 0xFF	; 255
     ee2:	3f 4f       	sbci	r19, 0xFF	; 255
     ee4:	82 0f       	add	r24, r18
     ee6:	93 1f       	adc	r25, r19
     ee8:	25 2d       	mov	r18, r5
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	82 17       	cp	r24, r18
     eee:	93 07       	cpc	r25, r19
     ef0:	14 f4       	brge	.+4      	; 0xef6 <vfprintf+0x266>
     ef2:	58 1a       	sub	r5, r24
     ef4:	01 c0       	rjmp	.+2      	; 0xef8 <vfprintf+0x268>
     ef6:	51 2c       	mov	r5, r1
     ef8:	89 2d       	mov	r24, r9
     efa:	89 70       	andi	r24, 0x09	; 9
     efc:	49 f4       	brne	.+18     	; 0xf10 <vfprintf+0x280>
     efe:	55 20       	and	r5, r5
     f00:	39 f0       	breq	.+14     	; 0xf10 <vfprintf+0x280>
     f02:	b7 01       	movw	r22, r14
     f04:	80 e2       	ldi	r24, 0x20	; 32
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	0e 94 1f 0b 	call	0x163e	; 0x163e <fputc>
     f0c:	5a 94       	dec	r5
     f0e:	f7 cf       	rjmp	.-18     	; 0xefe <vfprintf+0x26e>
     f10:	00 23       	and	r16, r16
     f12:	29 f0       	breq	.+10     	; 0xf1e <vfprintf+0x28e>
     f14:	b7 01       	movw	r22, r14
     f16:	80 2f       	mov	r24, r16
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	0e 94 1f 0b 	call	0x163e	; 0x163e <fputc>
     f1e:	93 fc       	sbrc	r9, 3
     f20:	09 c0       	rjmp	.+18     	; 0xf34 <vfprintf+0x2a4>
     f22:	55 20       	and	r5, r5
     f24:	39 f0       	breq	.+14     	; 0xf34 <vfprintf+0x2a4>
     f26:	b7 01       	movw	r22, r14
     f28:	80 e3       	ldi	r24, 0x30	; 48
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	0e 94 1f 0b 	call	0x163e	; 0x163e <fputc>
     f30:	5a 94       	dec	r5
     f32:	f7 cf       	rjmp	.-18     	; 0xf22 <vfprintf+0x292>
     f34:	97 fe       	sbrs	r9, 7
     f36:	4c c0       	rjmp	.+152    	; 0xfd0 <vfprintf+0x340>
     f38:	46 01       	movw	r8, r12
     f3a:	d7 fe       	sbrs	r13, 7
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <vfprintf+0x2b2>
     f3e:	81 2c       	mov	r8, r1
     f40:	91 2c       	mov	r9, r1
     f42:	c6 01       	movw	r24, r12
     f44:	88 19       	sub	r24, r8
     f46:	99 09       	sbc	r25, r9
     f48:	f3 01       	movw	r30, r6
     f4a:	e8 0f       	add	r30, r24
     f4c:	f9 1f       	adc	r31, r25
     f4e:	fe 87       	std	Y+14, r31	; 0x0e
     f50:	ed 87       	std	Y+13, r30	; 0x0d
     f52:	96 01       	movw	r18, r12
     f54:	24 19       	sub	r18, r4
     f56:	31 09       	sbc	r19, r1
     f58:	38 8b       	std	Y+16, r19	; 0x10
     f5a:	2f 87       	std	Y+15, r18	; 0x0f
     f5c:	01 2f       	mov	r16, r17
     f5e:	10 e0       	ldi	r17, 0x00	; 0
     f60:	11 95       	neg	r17
     f62:	01 95       	neg	r16
     f64:	11 09       	sbc	r17, r1
     f66:	3f ef       	ldi	r19, 0xFF	; 255
     f68:	83 16       	cp	r8, r19
     f6a:	93 06       	cpc	r9, r19
     f6c:	29 f4       	brne	.+10     	; 0xf78 <vfprintf+0x2e8>
     f6e:	b7 01       	movw	r22, r14
     f70:	8e e2       	ldi	r24, 0x2E	; 46
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	0e 94 1f 0b 	call	0x163e	; 0x163e <fputc>
     f78:	c8 14       	cp	r12, r8
     f7a:	d9 04       	cpc	r13, r9
     f7c:	4c f0       	brlt	.+18     	; 0xf90 <vfprintf+0x300>
     f7e:	8f 85       	ldd	r24, Y+15	; 0x0f
     f80:	98 89       	ldd	r25, Y+16	; 0x10
     f82:	88 15       	cp	r24, r8
     f84:	99 05       	cpc	r25, r9
     f86:	24 f4       	brge	.+8      	; 0xf90 <vfprintf+0x300>
     f88:	ed 85       	ldd	r30, Y+13	; 0x0d
     f8a:	fe 85       	ldd	r31, Y+14	; 0x0e
     f8c:	81 81       	ldd	r24, Z+1	; 0x01
     f8e:	01 c0       	rjmp	.+2      	; 0xf92 <vfprintf+0x302>
     f90:	80 e3       	ldi	r24, 0x30	; 48
     f92:	f1 e0       	ldi	r31, 0x01	; 1
     f94:	8f 1a       	sub	r8, r31
     f96:	91 08       	sbc	r9, r1
     f98:	2d 85       	ldd	r18, Y+13	; 0x0d
     f9a:	3e 85       	ldd	r19, Y+14	; 0x0e
     f9c:	2f 5f       	subi	r18, 0xFF	; 255
     f9e:	3f 4f       	sbci	r19, 0xFF	; 255
     fa0:	3e 87       	std	Y+14, r19	; 0x0e
     fa2:	2d 87       	std	Y+13, r18	; 0x0d
     fa4:	80 16       	cp	r8, r16
     fa6:	91 06       	cpc	r9, r17
     fa8:	2c f0       	brlt	.+10     	; 0xfb4 <vfprintf+0x324>
     faa:	b7 01       	movw	r22, r14
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	0e 94 1f 0b 	call	0x163e	; 0x163e <fputc>
     fb2:	d9 cf       	rjmp	.-78     	; 0xf66 <vfprintf+0x2d6>
     fb4:	c8 14       	cp	r12, r8
     fb6:	d9 04       	cpc	r13, r9
     fb8:	41 f4       	brne	.+16     	; 0xfca <vfprintf+0x33a>
     fba:	9a 81       	ldd	r25, Y+2	; 0x02
     fbc:	96 33       	cpi	r25, 0x36	; 54
     fbe:	20 f4       	brcc	.+8      	; 0xfc8 <vfprintf+0x338>
     fc0:	95 33       	cpi	r25, 0x35	; 53
     fc2:	19 f4       	brne	.+6      	; 0xfca <vfprintf+0x33a>
     fc4:	3c 85       	ldd	r19, Y+12	; 0x0c
     fc6:	34 ff       	sbrs	r19, 4
     fc8:	81 e3       	ldi	r24, 0x31	; 49
     fca:	b7 01       	movw	r22, r14
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	4e c0       	rjmp	.+156    	; 0x106c <vfprintf+0x3dc>
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	81 33       	cpi	r24, 0x31	; 49
     fd4:	19 f0       	breq	.+6      	; 0xfdc <vfprintf+0x34c>
     fd6:	9c 85       	ldd	r25, Y+12	; 0x0c
     fd8:	9f 7e       	andi	r25, 0xEF	; 239
     fda:	9c 87       	std	Y+12, r25	; 0x0c
     fdc:	b7 01       	movw	r22, r14
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	0e 94 1f 0b 	call	0x163e	; 0x163e <fputc>
     fe4:	11 11       	cpse	r17, r1
     fe6:	05 c0       	rjmp	.+10     	; 0xff2 <vfprintf+0x362>
     fe8:	94 fc       	sbrc	r9, 4
     fea:	18 c0       	rjmp	.+48     	; 0x101c <vfprintf+0x38c>
     fec:	85 e6       	ldi	r24, 0x65	; 101
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	17 c0       	rjmp	.+46     	; 0x1020 <vfprintf+0x390>
     ff2:	b7 01       	movw	r22, r14
     ff4:	8e e2       	ldi	r24, 0x2E	; 46
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	0e 94 1f 0b 	call	0x163e	; 0x163e <fputc>
     ffc:	1e 5f       	subi	r17, 0xFE	; 254
     ffe:	82 e0       	ldi	r24, 0x02	; 2
    1000:	01 e0       	ldi	r16, 0x01	; 1
    1002:	08 0f       	add	r16, r24
    1004:	f3 01       	movw	r30, r6
    1006:	e8 0f       	add	r30, r24
    1008:	f1 1d       	adc	r31, r1
    100a:	80 81       	ld	r24, Z
    100c:	b7 01       	movw	r22, r14
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	0e 94 1f 0b 	call	0x163e	; 0x163e <fputc>
    1014:	80 2f       	mov	r24, r16
    1016:	01 13       	cpse	r16, r17
    1018:	f3 cf       	rjmp	.-26     	; 0x1000 <vfprintf+0x370>
    101a:	e6 cf       	rjmp	.-52     	; 0xfe8 <vfprintf+0x358>
    101c:	85 e4       	ldi	r24, 0x45	; 69
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	b7 01       	movw	r22, r14
    1022:	0e 94 1f 0b 	call	0x163e	; 0x163e <fputc>
    1026:	d7 fc       	sbrc	r13, 7
    1028:	06 c0       	rjmp	.+12     	; 0x1036 <vfprintf+0x3a6>
    102a:	c1 14       	cp	r12, r1
    102c:	d1 04       	cpc	r13, r1
    102e:	41 f4       	brne	.+16     	; 0x1040 <vfprintf+0x3b0>
    1030:	ec 85       	ldd	r30, Y+12	; 0x0c
    1032:	e4 ff       	sbrs	r30, 4
    1034:	05 c0       	rjmp	.+10     	; 0x1040 <vfprintf+0x3b0>
    1036:	d1 94       	neg	r13
    1038:	c1 94       	neg	r12
    103a:	d1 08       	sbc	r13, r1
    103c:	8d e2       	ldi	r24, 0x2D	; 45
    103e:	01 c0       	rjmp	.+2      	; 0x1042 <vfprintf+0x3b2>
    1040:	8b e2       	ldi	r24, 0x2B	; 43
    1042:	b7 01       	movw	r22, r14
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	0e 94 1f 0b 	call	0x163e	; 0x163e <fputc>
    104a:	80 e3       	ldi	r24, 0x30	; 48
    104c:	2a e0       	ldi	r18, 0x0A	; 10
    104e:	c2 16       	cp	r12, r18
    1050:	d1 04       	cpc	r13, r1
    1052:	2c f0       	brlt	.+10     	; 0x105e <vfprintf+0x3ce>
    1054:	8f 5f       	subi	r24, 0xFF	; 255
    1056:	fa e0       	ldi	r31, 0x0A	; 10
    1058:	cf 1a       	sub	r12, r31
    105a:	d1 08       	sbc	r13, r1
    105c:	f7 cf       	rjmp	.-18     	; 0x104c <vfprintf+0x3bc>
    105e:	b7 01       	movw	r22, r14
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	0e 94 1f 0b 	call	0x163e	; 0x163e <fputc>
    1066:	b7 01       	movw	r22, r14
    1068:	c6 01       	movw	r24, r12
    106a:	c0 96       	adiw	r24, 0x30	; 48
    106c:	0e 94 1f 0b 	call	0x163e	; 0x163e <fputc>
    1070:	54 c1       	rjmp	.+680    	; 0x131a <vfprintf+0x68a>
    1072:	83 36       	cpi	r24, 0x63	; 99
    1074:	31 f0       	breq	.+12     	; 0x1082 <vfprintf+0x3f2>
    1076:	83 37       	cpi	r24, 0x73	; 115
    1078:	79 f0       	breq	.+30     	; 0x1098 <vfprintf+0x408>
    107a:	83 35       	cpi	r24, 0x53	; 83
    107c:	09 f0       	breq	.+2      	; 0x1080 <vfprintf+0x3f0>
    107e:	56 c0       	rjmp	.+172    	; 0x112c <vfprintf+0x49c>
    1080:	20 c0       	rjmp	.+64     	; 0x10c2 <vfprintf+0x432>
    1082:	56 01       	movw	r10, r12
    1084:	32 e0       	ldi	r19, 0x02	; 2
    1086:	a3 0e       	add	r10, r19
    1088:	b1 1c       	adc	r11, r1
    108a:	f6 01       	movw	r30, r12
    108c:	80 81       	ld	r24, Z
    108e:	89 83       	std	Y+1, r24	; 0x01
    1090:	01 e0       	ldi	r16, 0x01	; 1
    1092:	10 e0       	ldi	r17, 0x00	; 0
    1094:	63 01       	movw	r12, r6
    1096:	12 c0       	rjmp	.+36     	; 0x10bc <vfprintf+0x42c>
    1098:	56 01       	movw	r10, r12
    109a:	f2 e0       	ldi	r31, 0x02	; 2
    109c:	af 0e       	add	r10, r31
    109e:	b1 1c       	adc	r11, r1
    10a0:	f6 01       	movw	r30, r12
    10a2:	c0 80       	ld	r12, Z
    10a4:	d1 80       	ldd	r13, Z+1	; 0x01
    10a6:	96 fe       	sbrs	r9, 6
    10a8:	03 c0       	rjmp	.+6      	; 0x10b0 <vfprintf+0x420>
    10aa:	61 2f       	mov	r22, r17
    10ac:	70 e0       	ldi	r23, 0x00	; 0
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <vfprintf+0x424>
    10b0:	6f ef       	ldi	r22, 0xFF	; 255
    10b2:	7f ef       	ldi	r23, 0xFF	; 255
    10b4:	c6 01       	movw	r24, r12
    10b6:	0e 94 0c 0b 	call	0x1618	; 0x1618 <strnlen>
    10ba:	8c 01       	movw	r16, r24
    10bc:	f9 2d       	mov	r31, r9
    10be:	ff 77       	andi	r31, 0x7F	; 127
    10c0:	14 c0       	rjmp	.+40     	; 0x10ea <vfprintf+0x45a>
    10c2:	56 01       	movw	r10, r12
    10c4:	22 e0       	ldi	r18, 0x02	; 2
    10c6:	a2 0e       	add	r10, r18
    10c8:	b1 1c       	adc	r11, r1
    10ca:	f6 01       	movw	r30, r12
    10cc:	c0 80       	ld	r12, Z
    10ce:	d1 80       	ldd	r13, Z+1	; 0x01
    10d0:	96 fe       	sbrs	r9, 6
    10d2:	03 c0       	rjmp	.+6      	; 0x10da <vfprintf+0x44a>
    10d4:	61 2f       	mov	r22, r17
    10d6:	70 e0       	ldi	r23, 0x00	; 0
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <vfprintf+0x44e>
    10da:	6f ef       	ldi	r22, 0xFF	; 255
    10dc:	7f ef       	ldi	r23, 0xFF	; 255
    10de:	c6 01       	movw	r24, r12
    10e0:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <strnlen_P>
    10e4:	8c 01       	movw	r16, r24
    10e6:	f9 2d       	mov	r31, r9
    10e8:	f0 68       	ori	r31, 0x80	; 128
    10ea:	9f 2e       	mov	r9, r31
    10ec:	f3 fd       	sbrc	r31, 3
    10ee:	1a c0       	rjmp	.+52     	; 0x1124 <vfprintf+0x494>
    10f0:	85 2d       	mov	r24, r5
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	08 17       	cp	r16, r24
    10f6:	19 07       	cpc	r17, r25
    10f8:	a8 f4       	brcc	.+42     	; 0x1124 <vfprintf+0x494>
    10fa:	b7 01       	movw	r22, r14
    10fc:	80 e2       	ldi	r24, 0x20	; 32
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	0e 94 1f 0b 	call	0x163e	; 0x163e <fputc>
    1104:	5a 94       	dec	r5
    1106:	f4 cf       	rjmp	.-24     	; 0x10f0 <vfprintf+0x460>
    1108:	f6 01       	movw	r30, r12
    110a:	97 fc       	sbrc	r9, 7
    110c:	85 91       	lpm	r24, Z+
    110e:	97 fe       	sbrs	r9, 7
    1110:	81 91       	ld	r24, Z+
    1112:	6f 01       	movw	r12, r30
    1114:	b7 01       	movw	r22, r14
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	0e 94 1f 0b 	call	0x163e	; 0x163e <fputc>
    111c:	51 10       	cpse	r5, r1
    111e:	5a 94       	dec	r5
    1120:	01 50       	subi	r16, 0x01	; 1
    1122:	11 09       	sbc	r17, r1
    1124:	01 15       	cp	r16, r1
    1126:	11 05       	cpc	r17, r1
    1128:	79 f7       	brne	.-34     	; 0x1108 <vfprintf+0x478>
    112a:	f7 c0       	rjmp	.+494    	; 0x131a <vfprintf+0x68a>
    112c:	84 36       	cpi	r24, 0x64	; 100
    112e:	11 f0       	breq	.+4      	; 0x1134 <vfprintf+0x4a4>
    1130:	89 36       	cpi	r24, 0x69	; 105
    1132:	61 f5       	brne	.+88     	; 0x118c <vfprintf+0x4fc>
    1134:	56 01       	movw	r10, r12
    1136:	97 fe       	sbrs	r9, 7
    1138:	09 c0       	rjmp	.+18     	; 0x114c <vfprintf+0x4bc>
    113a:	24 e0       	ldi	r18, 0x04	; 4
    113c:	a2 0e       	add	r10, r18
    113e:	b1 1c       	adc	r11, r1
    1140:	f6 01       	movw	r30, r12
    1142:	60 81       	ld	r22, Z
    1144:	71 81       	ldd	r23, Z+1	; 0x01
    1146:	82 81       	ldd	r24, Z+2	; 0x02
    1148:	93 81       	ldd	r25, Z+3	; 0x03
    114a:	0a c0       	rjmp	.+20     	; 0x1160 <vfprintf+0x4d0>
    114c:	f2 e0       	ldi	r31, 0x02	; 2
    114e:	af 0e       	add	r10, r31
    1150:	b1 1c       	adc	r11, r1
    1152:	f6 01       	movw	r30, r12
    1154:	60 81       	ld	r22, Z
    1156:	71 81       	ldd	r23, Z+1	; 0x01
    1158:	07 2e       	mov	r0, r23
    115a:	00 0c       	add	r0, r0
    115c:	88 0b       	sbc	r24, r24
    115e:	99 0b       	sbc	r25, r25
    1160:	f9 2d       	mov	r31, r9
    1162:	ff 76       	andi	r31, 0x6F	; 111
    1164:	9f 2e       	mov	r9, r31
    1166:	97 ff       	sbrs	r25, 7
    1168:	09 c0       	rjmp	.+18     	; 0x117c <vfprintf+0x4ec>
    116a:	90 95       	com	r25
    116c:	80 95       	com	r24
    116e:	70 95       	com	r23
    1170:	61 95       	neg	r22
    1172:	7f 4f       	sbci	r23, 0xFF	; 255
    1174:	8f 4f       	sbci	r24, 0xFF	; 255
    1176:	9f 4f       	sbci	r25, 0xFF	; 255
    1178:	f0 68       	ori	r31, 0x80	; 128
    117a:	9f 2e       	mov	r9, r31
    117c:	2a e0       	ldi	r18, 0x0A	; 10
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	a3 01       	movw	r20, r6
    1182:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__ultoa_invert>
    1186:	c8 2e       	mov	r12, r24
    1188:	c6 18       	sub	r12, r6
    118a:	3f c0       	rjmp	.+126    	; 0x120a <vfprintf+0x57a>
    118c:	09 2d       	mov	r16, r9
    118e:	85 37       	cpi	r24, 0x75	; 117
    1190:	21 f4       	brne	.+8      	; 0x119a <vfprintf+0x50a>
    1192:	0f 7e       	andi	r16, 0xEF	; 239
    1194:	2a e0       	ldi	r18, 0x0A	; 10
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	1d c0       	rjmp	.+58     	; 0x11d4 <vfprintf+0x544>
    119a:	09 7f       	andi	r16, 0xF9	; 249
    119c:	8f 36       	cpi	r24, 0x6F	; 111
    119e:	91 f0       	breq	.+36     	; 0x11c4 <vfprintf+0x534>
    11a0:	18 f4       	brcc	.+6      	; 0x11a8 <vfprintf+0x518>
    11a2:	88 35       	cpi	r24, 0x58	; 88
    11a4:	59 f0       	breq	.+22     	; 0x11bc <vfprintf+0x52c>
    11a6:	c3 c0       	rjmp	.+390    	; 0x132e <vfprintf+0x69e>
    11a8:	80 37       	cpi	r24, 0x70	; 112
    11aa:	19 f0       	breq	.+6      	; 0x11b2 <vfprintf+0x522>
    11ac:	88 37       	cpi	r24, 0x78	; 120
    11ae:	11 f0       	breq	.+4      	; 0x11b4 <vfprintf+0x524>
    11b0:	be c0       	rjmp	.+380    	; 0x132e <vfprintf+0x69e>
    11b2:	00 61       	ori	r16, 0x10	; 16
    11b4:	04 ff       	sbrs	r16, 4
    11b6:	09 c0       	rjmp	.+18     	; 0x11ca <vfprintf+0x53a>
    11b8:	04 60       	ori	r16, 0x04	; 4
    11ba:	07 c0       	rjmp	.+14     	; 0x11ca <vfprintf+0x53a>
    11bc:	94 fe       	sbrs	r9, 4
    11be:	08 c0       	rjmp	.+16     	; 0x11d0 <vfprintf+0x540>
    11c0:	06 60       	ori	r16, 0x06	; 6
    11c2:	06 c0       	rjmp	.+12     	; 0x11d0 <vfprintf+0x540>
    11c4:	28 e0       	ldi	r18, 0x08	; 8
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	05 c0       	rjmp	.+10     	; 0x11d4 <vfprintf+0x544>
    11ca:	20 e1       	ldi	r18, 0x10	; 16
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <vfprintf+0x544>
    11d0:	20 e1       	ldi	r18, 0x10	; 16
    11d2:	32 e0       	ldi	r19, 0x02	; 2
    11d4:	56 01       	movw	r10, r12
    11d6:	07 ff       	sbrs	r16, 7
    11d8:	09 c0       	rjmp	.+18     	; 0x11ec <vfprintf+0x55c>
    11da:	84 e0       	ldi	r24, 0x04	; 4
    11dc:	a8 0e       	add	r10, r24
    11de:	b1 1c       	adc	r11, r1
    11e0:	f6 01       	movw	r30, r12
    11e2:	60 81       	ld	r22, Z
    11e4:	71 81       	ldd	r23, Z+1	; 0x01
    11e6:	82 81       	ldd	r24, Z+2	; 0x02
    11e8:	93 81       	ldd	r25, Z+3	; 0x03
    11ea:	08 c0       	rjmp	.+16     	; 0x11fc <vfprintf+0x56c>
    11ec:	f2 e0       	ldi	r31, 0x02	; 2
    11ee:	af 0e       	add	r10, r31
    11f0:	b1 1c       	adc	r11, r1
    11f2:	f6 01       	movw	r30, r12
    11f4:	60 81       	ld	r22, Z
    11f6:	71 81       	ldd	r23, Z+1	; 0x01
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	a3 01       	movw	r20, r6
    11fe:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__ultoa_invert>
    1202:	c8 2e       	mov	r12, r24
    1204:	c6 18       	sub	r12, r6
    1206:	0f 77       	andi	r16, 0x7F	; 127
    1208:	90 2e       	mov	r9, r16
    120a:	96 fe       	sbrs	r9, 6
    120c:	0b c0       	rjmp	.+22     	; 0x1224 <vfprintf+0x594>
    120e:	09 2d       	mov	r16, r9
    1210:	0e 7f       	andi	r16, 0xFE	; 254
    1212:	c1 16       	cp	r12, r17
    1214:	50 f4       	brcc	.+20     	; 0x122a <vfprintf+0x59a>
    1216:	94 fe       	sbrs	r9, 4
    1218:	0a c0       	rjmp	.+20     	; 0x122e <vfprintf+0x59e>
    121a:	92 fc       	sbrc	r9, 2
    121c:	08 c0       	rjmp	.+16     	; 0x122e <vfprintf+0x59e>
    121e:	09 2d       	mov	r16, r9
    1220:	0e 7e       	andi	r16, 0xEE	; 238
    1222:	05 c0       	rjmp	.+10     	; 0x122e <vfprintf+0x59e>
    1224:	dc 2c       	mov	r13, r12
    1226:	09 2d       	mov	r16, r9
    1228:	03 c0       	rjmp	.+6      	; 0x1230 <vfprintf+0x5a0>
    122a:	dc 2c       	mov	r13, r12
    122c:	01 c0       	rjmp	.+2      	; 0x1230 <vfprintf+0x5a0>
    122e:	d1 2e       	mov	r13, r17
    1230:	04 ff       	sbrs	r16, 4
    1232:	0d c0       	rjmp	.+26     	; 0x124e <vfprintf+0x5be>
    1234:	fe 01       	movw	r30, r28
    1236:	ec 0d       	add	r30, r12
    1238:	f1 1d       	adc	r31, r1
    123a:	80 81       	ld	r24, Z
    123c:	80 33       	cpi	r24, 0x30	; 48
    123e:	11 f4       	brne	.+4      	; 0x1244 <vfprintf+0x5b4>
    1240:	09 7e       	andi	r16, 0xE9	; 233
    1242:	09 c0       	rjmp	.+18     	; 0x1256 <vfprintf+0x5c6>
    1244:	02 ff       	sbrs	r16, 2
    1246:	06 c0       	rjmp	.+12     	; 0x1254 <vfprintf+0x5c4>
    1248:	d3 94       	inc	r13
    124a:	d3 94       	inc	r13
    124c:	04 c0       	rjmp	.+8      	; 0x1256 <vfprintf+0x5c6>
    124e:	80 2f       	mov	r24, r16
    1250:	86 78       	andi	r24, 0x86	; 134
    1252:	09 f0       	breq	.+2      	; 0x1256 <vfprintf+0x5c6>
    1254:	d3 94       	inc	r13
    1256:	03 fd       	sbrc	r16, 3
    1258:	11 c0       	rjmp	.+34     	; 0x127c <vfprintf+0x5ec>
    125a:	00 ff       	sbrs	r16, 0
    125c:	06 c0       	rjmp	.+12     	; 0x126a <vfprintf+0x5da>
    125e:	1c 2d       	mov	r17, r12
    1260:	d5 14       	cp	r13, r5
    1262:	80 f4       	brcc	.+32     	; 0x1284 <vfprintf+0x5f4>
    1264:	15 0d       	add	r17, r5
    1266:	1d 19       	sub	r17, r13
    1268:	0d c0       	rjmp	.+26     	; 0x1284 <vfprintf+0x5f4>
    126a:	d5 14       	cp	r13, r5
    126c:	58 f4       	brcc	.+22     	; 0x1284 <vfprintf+0x5f4>
    126e:	b7 01       	movw	r22, r14
    1270:	80 e2       	ldi	r24, 0x20	; 32
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	0e 94 1f 0b 	call	0x163e	; 0x163e <fputc>
    1278:	d3 94       	inc	r13
    127a:	f7 cf       	rjmp	.-18     	; 0x126a <vfprintf+0x5da>
    127c:	d5 14       	cp	r13, r5
    127e:	10 f4       	brcc	.+4      	; 0x1284 <vfprintf+0x5f4>
    1280:	5d 18       	sub	r5, r13
    1282:	01 c0       	rjmp	.+2      	; 0x1286 <vfprintf+0x5f6>
    1284:	51 2c       	mov	r5, r1
    1286:	04 ff       	sbrs	r16, 4
    1288:	10 c0       	rjmp	.+32     	; 0x12aa <vfprintf+0x61a>
    128a:	b7 01       	movw	r22, r14
    128c:	80 e3       	ldi	r24, 0x30	; 48
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	0e 94 1f 0b 	call	0x163e	; 0x163e <fputc>
    1294:	02 ff       	sbrs	r16, 2
    1296:	17 c0       	rjmp	.+46     	; 0x12c6 <vfprintf+0x636>
    1298:	01 fd       	sbrc	r16, 1
    129a:	03 c0       	rjmp	.+6      	; 0x12a2 <vfprintf+0x612>
    129c:	88 e7       	ldi	r24, 0x78	; 120
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <vfprintf+0x616>
    12a2:	88 e5       	ldi	r24, 0x58	; 88
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	b7 01       	movw	r22, r14
    12a8:	0c c0       	rjmp	.+24     	; 0x12c2 <vfprintf+0x632>
    12aa:	80 2f       	mov	r24, r16
    12ac:	86 78       	andi	r24, 0x86	; 134
    12ae:	59 f0       	breq	.+22     	; 0x12c6 <vfprintf+0x636>
    12b0:	01 ff       	sbrs	r16, 1
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <vfprintf+0x628>
    12b4:	8b e2       	ldi	r24, 0x2B	; 43
    12b6:	01 c0       	rjmp	.+2      	; 0x12ba <vfprintf+0x62a>
    12b8:	80 e2       	ldi	r24, 0x20	; 32
    12ba:	07 fd       	sbrc	r16, 7
    12bc:	8d e2       	ldi	r24, 0x2D	; 45
    12be:	b7 01       	movw	r22, r14
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	0e 94 1f 0b 	call	0x163e	; 0x163e <fputc>
    12c6:	c1 16       	cp	r12, r17
    12c8:	38 f4       	brcc	.+14     	; 0x12d8 <vfprintf+0x648>
    12ca:	b7 01       	movw	r22, r14
    12cc:	80 e3       	ldi	r24, 0x30	; 48
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	0e 94 1f 0b 	call	0x163e	; 0x163e <fputc>
    12d4:	11 50       	subi	r17, 0x01	; 1
    12d6:	f7 cf       	rjmp	.-18     	; 0x12c6 <vfprintf+0x636>
    12d8:	ca 94       	dec	r12
    12da:	f3 01       	movw	r30, r6
    12dc:	ec 0d       	add	r30, r12
    12de:	f1 1d       	adc	r31, r1
    12e0:	80 81       	ld	r24, Z
    12e2:	b7 01       	movw	r22, r14
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	0e 94 1f 0b 	call	0x163e	; 0x163e <fputc>
    12ea:	c1 10       	cpse	r12, r1
    12ec:	f5 cf       	rjmp	.-22     	; 0x12d8 <vfprintf+0x648>
    12ee:	15 c0       	rjmp	.+42     	; 0x131a <vfprintf+0x68a>
    12f0:	f4 e0       	ldi	r31, 0x04	; 4
    12f2:	f5 15       	cp	r31, r5
    12f4:	60 f5       	brcc	.+88     	; 0x134e <vfprintf+0x6be>
    12f6:	84 e0       	ldi	r24, 0x04	; 4
    12f8:	58 1a       	sub	r5, r24
    12fa:	93 fe       	sbrs	r9, 3
    12fc:	1f c0       	rjmp	.+62     	; 0x133c <vfprintf+0x6ac>
    12fe:	01 11       	cpse	r16, r1
    1300:	27 c0       	rjmp	.+78     	; 0x1350 <vfprintf+0x6c0>
    1302:	2c 85       	ldd	r18, Y+12	; 0x0c
    1304:	23 ff       	sbrs	r18, 3
    1306:	2a c0       	rjmp	.+84     	; 0x135c <vfprintf+0x6cc>
    1308:	08 e6       	ldi	r16, 0x68	; 104
    130a:	10 e0       	ldi	r17, 0x00	; 0
    130c:	39 2d       	mov	r19, r9
    130e:	30 71       	andi	r19, 0x10	; 16
    1310:	93 2e       	mov	r9, r19
    1312:	f8 01       	movw	r30, r16
    1314:	84 91       	lpm	r24, Z
    1316:	81 11       	cpse	r24, r1
    1318:	24 c0       	rjmp	.+72     	; 0x1362 <vfprintf+0x6d2>
    131a:	55 20       	and	r5, r5
    131c:	09 f4       	brne	.+2      	; 0x1320 <vfprintf+0x690>
    131e:	e4 cc       	rjmp	.-1592   	; 0xce8 <vfprintf+0x58>
    1320:	b7 01       	movw	r22, r14
    1322:	80 e2       	ldi	r24, 0x20	; 32
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	0e 94 1f 0b 	call	0x163e	; 0x163e <fputc>
    132a:	5a 94       	dec	r5
    132c:	f6 cf       	rjmp	.-20     	; 0x131a <vfprintf+0x68a>
    132e:	f7 01       	movw	r30, r14
    1330:	86 81       	ldd	r24, Z+6	; 0x06
    1332:	97 81       	ldd	r25, Z+7	; 0x07
    1334:	26 c0       	rjmp	.+76     	; 0x1382 <vfprintf+0x6f2>
    1336:	8f ef       	ldi	r24, 0xFF	; 255
    1338:	9f ef       	ldi	r25, 0xFF	; 255
    133a:	23 c0       	rjmp	.+70     	; 0x1382 <vfprintf+0x6f2>
    133c:	b7 01       	movw	r22, r14
    133e:	80 e2       	ldi	r24, 0x20	; 32
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	0e 94 1f 0b 	call	0x163e	; 0x163e <fputc>
    1346:	5a 94       	dec	r5
    1348:	51 10       	cpse	r5, r1
    134a:	f8 cf       	rjmp	.-16     	; 0x133c <vfprintf+0x6ac>
    134c:	d8 cf       	rjmp	.-80     	; 0x12fe <vfprintf+0x66e>
    134e:	51 2c       	mov	r5, r1
    1350:	b7 01       	movw	r22, r14
    1352:	80 2f       	mov	r24, r16
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	0e 94 1f 0b 	call	0x163e	; 0x163e <fputc>
    135a:	d3 cf       	rjmp	.-90     	; 0x1302 <vfprintf+0x672>
    135c:	0c e6       	ldi	r16, 0x6C	; 108
    135e:	10 e0       	ldi	r17, 0x00	; 0
    1360:	d5 cf       	rjmp	.-86     	; 0x130c <vfprintf+0x67c>
    1362:	91 10       	cpse	r9, r1
    1364:	80 52       	subi	r24, 0x20	; 32
    1366:	b7 01       	movw	r22, r14
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	0e 94 1f 0b 	call	0x163e	; 0x163e <fputc>
    136e:	0f 5f       	subi	r16, 0xFF	; 255
    1370:	1f 4f       	sbci	r17, 0xFF	; 255
    1372:	cf cf       	rjmp	.-98     	; 0x1312 <vfprintf+0x682>
    1374:	23 e0       	ldi	r18, 0x03	; 3
    1376:	25 15       	cp	r18, r5
    1378:	10 f4       	brcc	.+4      	; 0x137e <vfprintf+0x6ee>
    137a:	83 e0       	ldi	r24, 0x03	; 3
    137c:	bd cf       	rjmp	.-134    	; 0x12f8 <vfprintf+0x668>
    137e:	51 2c       	mov	r5, r1
    1380:	c0 cf       	rjmp	.-128    	; 0x1302 <vfprintf+0x672>
    1382:	60 96       	adiw	r28, 0x10	; 16
    1384:	e2 e1       	ldi	r30, 0x12	; 18
    1386:	0c 94 e1 09 	jmp	0x13c2	; 0x13c2 <__epilogue_restores__>

0000138a <__prologue_saves__>:
    138a:	2f 92       	push	r2
    138c:	3f 92       	push	r3
    138e:	4f 92       	push	r4
    1390:	5f 92       	push	r5
    1392:	6f 92       	push	r6
    1394:	7f 92       	push	r7
    1396:	8f 92       	push	r8
    1398:	9f 92       	push	r9
    139a:	af 92       	push	r10
    139c:	bf 92       	push	r11
    139e:	cf 92       	push	r12
    13a0:	df 92       	push	r13
    13a2:	ef 92       	push	r14
    13a4:	ff 92       	push	r15
    13a6:	0f 93       	push	r16
    13a8:	1f 93       	push	r17
    13aa:	cf 93       	push	r28
    13ac:	df 93       	push	r29
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62
    13b2:	ca 1b       	sub	r28, r26
    13b4:	db 0b       	sbc	r29, r27
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	f8 94       	cli
    13ba:	de bf       	out	0x3e, r29	; 62
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	cd bf       	out	0x3d, r28	; 61
    13c0:	09 94       	ijmp

000013c2 <__epilogue_restores__>:
    13c2:	2a 88       	ldd	r2, Y+18	; 0x12
    13c4:	39 88       	ldd	r3, Y+17	; 0x11
    13c6:	48 88       	ldd	r4, Y+16	; 0x10
    13c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    13ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    13cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    13ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    13d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    13d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    13d4:	b9 84       	ldd	r11, Y+9	; 0x09
    13d6:	c8 84       	ldd	r12, Y+8	; 0x08
    13d8:	df 80       	ldd	r13, Y+7	; 0x07
    13da:	ee 80       	ldd	r14, Y+6	; 0x06
    13dc:	fd 80       	ldd	r15, Y+5	; 0x05
    13de:	0c 81       	ldd	r16, Y+4	; 0x04
    13e0:	1b 81       	ldd	r17, Y+3	; 0x03
    13e2:	aa 81       	ldd	r26, Y+2	; 0x02
    13e4:	b9 81       	ldd	r27, Y+1	; 0x01
    13e6:	ce 0f       	add	r28, r30
    13e8:	d1 1d       	adc	r29, r1
    13ea:	0f b6       	in	r0, 0x3f	; 63
    13ec:	f8 94       	cli
    13ee:	de bf       	out	0x3e, r29	; 62
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	cd bf       	out	0x3d, r28	; 61
    13f4:	ed 01       	movw	r28, r26
    13f6:	08 95       	ret

000013f8 <atof>:
    13f8:	66 27       	eor	r22, r22
    13fa:	77 27       	eor	r23, r23
    13fc:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <strtod>

00001400 <atoi>:
    1400:	fc 01       	movw	r30, r24
    1402:	88 27       	eor	r24, r24
    1404:	99 27       	eor	r25, r25
    1406:	e8 94       	clt
    1408:	21 91       	ld	r18, Z+
    140a:	20 32       	cpi	r18, 0x20	; 32
    140c:	e9 f3       	breq	.-6      	; 0x1408 <atoi+0x8>
    140e:	29 30       	cpi	r18, 0x09	; 9
    1410:	10 f0       	brcs	.+4      	; 0x1416 <atoi+0x16>
    1412:	2e 30       	cpi	r18, 0x0E	; 14
    1414:	c8 f3       	brcs	.-14     	; 0x1408 <atoi+0x8>
    1416:	2b 32       	cpi	r18, 0x2B	; 43
    1418:	41 f0       	breq	.+16     	; 0x142a <atoi+0x2a>
    141a:	2d 32       	cpi	r18, 0x2D	; 45
    141c:	39 f4       	brne	.+14     	; 0x142c <atoi+0x2c>
    141e:	68 94       	set
    1420:	04 c0       	rjmp	.+8      	; 0x142a <atoi+0x2a>
    1422:	0e 94 17 0b 	call	0x162e	; 0x162e <__mulhi_const_10>
    1426:	82 0f       	add	r24, r18
    1428:	91 1d       	adc	r25, r1
    142a:	21 91       	ld	r18, Z+
    142c:	20 53       	subi	r18, 0x30	; 48
    142e:	2a 30       	cpi	r18, 0x0A	; 10
    1430:	c0 f3       	brcs	.-16     	; 0x1422 <atoi+0x22>
    1432:	1e f4       	brtc	.+6      	; 0x143a <atoi+0x3a>
    1434:	90 95       	com	r25
    1436:	81 95       	neg	r24
    1438:	9f 4f       	sbci	r25, 0xFF	; 255
    143a:	08 95       	ret

0000143c <__ftoa_engine>:
    143c:	28 30       	cpi	r18, 0x08	; 8
    143e:	08 f0       	brcs	.+2      	; 0x1442 <__ftoa_engine+0x6>
    1440:	27 e0       	ldi	r18, 0x07	; 7
    1442:	33 27       	eor	r19, r19
    1444:	da 01       	movw	r26, r20
    1446:	99 0f       	add	r25, r25
    1448:	31 1d       	adc	r19, r1
    144a:	87 fd       	sbrc	r24, 7
    144c:	91 60       	ori	r25, 0x01	; 1
    144e:	00 96       	adiw	r24, 0x00	; 0
    1450:	61 05       	cpc	r22, r1
    1452:	71 05       	cpc	r23, r1
    1454:	39 f4       	brne	.+14     	; 0x1464 <__ftoa_engine+0x28>
    1456:	32 60       	ori	r19, 0x02	; 2
    1458:	2e 5f       	subi	r18, 0xFE	; 254
    145a:	3d 93       	st	X+, r19
    145c:	30 e3       	ldi	r19, 0x30	; 48
    145e:	2a 95       	dec	r18
    1460:	e1 f7       	brne	.-8      	; 0x145a <__ftoa_engine+0x1e>
    1462:	08 95       	ret
    1464:	9f 3f       	cpi	r25, 0xFF	; 255
    1466:	30 f0       	brcs	.+12     	; 0x1474 <__ftoa_engine+0x38>
    1468:	80 38       	cpi	r24, 0x80	; 128
    146a:	71 05       	cpc	r23, r1
    146c:	61 05       	cpc	r22, r1
    146e:	09 f0       	breq	.+2      	; 0x1472 <__ftoa_engine+0x36>
    1470:	3c 5f       	subi	r19, 0xFC	; 252
    1472:	3c 5f       	subi	r19, 0xFC	; 252
    1474:	3d 93       	st	X+, r19
    1476:	91 30       	cpi	r25, 0x01	; 1
    1478:	08 f0       	brcs	.+2      	; 0x147c <__ftoa_engine+0x40>
    147a:	80 68       	ori	r24, 0x80	; 128
    147c:	91 1d       	adc	r25, r1
    147e:	df 93       	push	r29
    1480:	cf 93       	push	r28
    1482:	1f 93       	push	r17
    1484:	0f 93       	push	r16
    1486:	ff 92       	push	r15
    1488:	ef 92       	push	r14
    148a:	19 2f       	mov	r17, r25
    148c:	98 7f       	andi	r25, 0xF8	; 248
    148e:	96 95       	lsr	r25
    1490:	e9 2f       	mov	r30, r25
    1492:	96 95       	lsr	r25
    1494:	96 95       	lsr	r25
    1496:	e9 0f       	add	r30, r25
    1498:	ff 27       	eor	r31, r31
    149a:	e6 53       	subi	r30, 0x36	; 54
    149c:	ff 4f       	sbci	r31, 0xFF	; 255
    149e:	99 27       	eor	r25, r25
    14a0:	33 27       	eor	r19, r19
    14a2:	ee 24       	eor	r14, r14
    14a4:	ff 24       	eor	r15, r15
    14a6:	a7 01       	movw	r20, r14
    14a8:	e7 01       	movw	r28, r14
    14aa:	05 90       	lpm	r0, Z+
    14ac:	08 94       	sec
    14ae:	07 94       	ror	r0
    14b0:	28 f4       	brcc	.+10     	; 0x14bc <__ftoa_engine+0x80>
    14b2:	36 0f       	add	r19, r22
    14b4:	e7 1e       	adc	r14, r23
    14b6:	f8 1e       	adc	r15, r24
    14b8:	49 1f       	adc	r20, r25
    14ba:	51 1d       	adc	r21, r1
    14bc:	66 0f       	add	r22, r22
    14be:	77 1f       	adc	r23, r23
    14c0:	88 1f       	adc	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	06 94       	lsr	r0
    14c6:	a1 f7       	brne	.-24     	; 0x14b0 <__ftoa_engine+0x74>
    14c8:	05 90       	lpm	r0, Z+
    14ca:	07 94       	ror	r0
    14cc:	28 f4       	brcc	.+10     	; 0x14d8 <__ftoa_engine+0x9c>
    14ce:	e7 0e       	add	r14, r23
    14d0:	f8 1e       	adc	r15, r24
    14d2:	49 1f       	adc	r20, r25
    14d4:	56 1f       	adc	r21, r22
    14d6:	c1 1d       	adc	r28, r1
    14d8:	77 0f       	add	r23, r23
    14da:	88 1f       	adc	r24, r24
    14dc:	99 1f       	adc	r25, r25
    14de:	66 1f       	adc	r22, r22
    14e0:	06 94       	lsr	r0
    14e2:	a1 f7       	brne	.-24     	; 0x14cc <__ftoa_engine+0x90>
    14e4:	05 90       	lpm	r0, Z+
    14e6:	07 94       	ror	r0
    14e8:	28 f4       	brcc	.+10     	; 0x14f4 <__ftoa_engine+0xb8>
    14ea:	f8 0e       	add	r15, r24
    14ec:	49 1f       	adc	r20, r25
    14ee:	56 1f       	adc	r21, r22
    14f0:	c7 1f       	adc	r28, r23
    14f2:	d1 1d       	adc	r29, r1
    14f4:	88 0f       	add	r24, r24
    14f6:	99 1f       	adc	r25, r25
    14f8:	66 1f       	adc	r22, r22
    14fa:	77 1f       	adc	r23, r23
    14fc:	06 94       	lsr	r0
    14fe:	a1 f7       	brne	.-24     	; 0x14e8 <__ftoa_engine+0xac>
    1500:	05 90       	lpm	r0, Z+
    1502:	07 94       	ror	r0
    1504:	20 f4       	brcc	.+8      	; 0x150e <__ftoa_engine+0xd2>
    1506:	49 0f       	add	r20, r25
    1508:	56 1f       	adc	r21, r22
    150a:	c7 1f       	adc	r28, r23
    150c:	d8 1f       	adc	r29, r24
    150e:	99 0f       	add	r25, r25
    1510:	66 1f       	adc	r22, r22
    1512:	77 1f       	adc	r23, r23
    1514:	88 1f       	adc	r24, r24
    1516:	06 94       	lsr	r0
    1518:	a9 f7       	brne	.-22     	; 0x1504 <__ftoa_engine+0xc8>
    151a:	84 91       	lpm	r24, Z
    151c:	10 95       	com	r17
    151e:	17 70       	andi	r17, 0x07	; 7
    1520:	41 f0       	breq	.+16     	; 0x1532 <__ftoa_engine+0xf6>
    1522:	d6 95       	lsr	r29
    1524:	c7 95       	ror	r28
    1526:	57 95       	ror	r21
    1528:	47 95       	ror	r20
    152a:	f7 94       	ror	r15
    152c:	e7 94       	ror	r14
    152e:	1a 95       	dec	r17
    1530:	c1 f7       	brne	.-16     	; 0x1522 <__ftoa_engine+0xe6>
    1532:	e0 e7       	ldi	r30, 0x70	; 112
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	68 94       	set
    1538:	15 90       	lpm	r1, Z+
    153a:	15 91       	lpm	r17, Z+
    153c:	35 91       	lpm	r19, Z+
    153e:	65 91       	lpm	r22, Z+
    1540:	95 91       	lpm	r25, Z+
    1542:	05 90       	lpm	r0, Z+
    1544:	7f e2       	ldi	r23, 0x2F	; 47
    1546:	73 95       	inc	r23
    1548:	e1 18       	sub	r14, r1
    154a:	f1 0a       	sbc	r15, r17
    154c:	43 0b       	sbc	r20, r19
    154e:	56 0b       	sbc	r21, r22
    1550:	c9 0b       	sbc	r28, r25
    1552:	d0 09       	sbc	r29, r0
    1554:	c0 f7       	brcc	.-16     	; 0x1546 <__ftoa_engine+0x10a>
    1556:	e1 0c       	add	r14, r1
    1558:	f1 1e       	adc	r15, r17
    155a:	43 1f       	adc	r20, r19
    155c:	56 1f       	adc	r21, r22
    155e:	c9 1f       	adc	r28, r25
    1560:	d0 1d       	adc	r29, r0
    1562:	7e f4       	brtc	.+30     	; 0x1582 <__ftoa_engine+0x146>
    1564:	70 33       	cpi	r23, 0x30	; 48
    1566:	11 f4       	brne	.+4      	; 0x156c <__ftoa_engine+0x130>
    1568:	8a 95       	dec	r24
    156a:	e6 cf       	rjmp	.-52     	; 0x1538 <__ftoa_engine+0xfc>
    156c:	e8 94       	clt
    156e:	01 50       	subi	r16, 0x01	; 1
    1570:	30 f0       	brcs	.+12     	; 0x157e <__ftoa_engine+0x142>
    1572:	08 0f       	add	r16, r24
    1574:	0a f4       	brpl	.+2      	; 0x1578 <__ftoa_engine+0x13c>
    1576:	00 27       	eor	r16, r16
    1578:	02 17       	cp	r16, r18
    157a:	08 f4       	brcc	.+2      	; 0x157e <__ftoa_engine+0x142>
    157c:	20 2f       	mov	r18, r16
    157e:	23 95       	inc	r18
    1580:	02 2f       	mov	r16, r18
    1582:	7a 33       	cpi	r23, 0x3A	; 58
    1584:	28 f0       	brcs	.+10     	; 0x1590 <__ftoa_engine+0x154>
    1586:	79 e3       	ldi	r23, 0x39	; 57
    1588:	7d 93       	st	X+, r23
    158a:	2a 95       	dec	r18
    158c:	e9 f7       	brne	.-6      	; 0x1588 <__ftoa_engine+0x14c>
    158e:	10 c0       	rjmp	.+32     	; 0x15b0 <__ftoa_engine+0x174>
    1590:	7d 93       	st	X+, r23
    1592:	2a 95       	dec	r18
    1594:	89 f6       	brne	.-94     	; 0x1538 <__ftoa_engine+0xfc>
    1596:	06 94       	lsr	r0
    1598:	97 95       	ror	r25
    159a:	67 95       	ror	r22
    159c:	37 95       	ror	r19
    159e:	17 95       	ror	r17
    15a0:	17 94       	ror	r1
    15a2:	e1 18       	sub	r14, r1
    15a4:	f1 0a       	sbc	r15, r17
    15a6:	43 0b       	sbc	r20, r19
    15a8:	56 0b       	sbc	r21, r22
    15aa:	c9 0b       	sbc	r28, r25
    15ac:	d0 09       	sbc	r29, r0
    15ae:	98 f0       	brcs	.+38     	; 0x15d6 <__ftoa_engine+0x19a>
    15b0:	23 95       	inc	r18
    15b2:	7e 91       	ld	r23, -X
    15b4:	73 95       	inc	r23
    15b6:	7a 33       	cpi	r23, 0x3A	; 58
    15b8:	08 f0       	brcs	.+2      	; 0x15bc <__ftoa_engine+0x180>
    15ba:	70 e3       	ldi	r23, 0x30	; 48
    15bc:	7c 93       	st	X, r23
    15be:	20 13       	cpse	r18, r16
    15c0:	b8 f7       	brcc	.-18     	; 0x15b0 <__ftoa_engine+0x174>
    15c2:	7e 91       	ld	r23, -X
    15c4:	70 61       	ori	r23, 0x10	; 16
    15c6:	7d 93       	st	X+, r23
    15c8:	30 f0       	brcs	.+12     	; 0x15d6 <__ftoa_engine+0x19a>
    15ca:	83 95       	inc	r24
    15cc:	71 e3       	ldi	r23, 0x31	; 49
    15ce:	7d 93       	st	X+, r23
    15d0:	70 e3       	ldi	r23, 0x30	; 48
    15d2:	2a 95       	dec	r18
    15d4:	e1 f7       	brne	.-8      	; 0x15ce <__ftoa_engine+0x192>
    15d6:	11 24       	eor	r1, r1
    15d8:	ef 90       	pop	r14
    15da:	ff 90       	pop	r15
    15dc:	0f 91       	pop	r16
    15de:	1f 91       	pop	r17
    15e0:	cf 91       	pop	r28
    15e2:	df 91       	pop	r29
    15e4:	99 27       	eor	r25, r25
    15e6:	87 fd       	sbrc	r24, 7
    15e8:	90 95       	com	r25
    15ea:	08 95       	ret

000015ec <strnlen_P>:
    15ec:	fc 01       	movw	r30, r24
    15ee:	05 90       	lpm	r0, Z+
    15f0:	61 50       	subi	r22, 0x01	; 1
    15f2:	70 40       	sbci	r23, 0x00	; 0
    15f4:	01 10       	cpse	r0, r1
    15f6:	d8 f7       	brcc	.-10     	; 0x15ee <strnlen_P+0x2>
    15f8:	80 95       	com	r24
    15fa:	90 95       	com	r25
    15fc:	8e 0f       	add	r24, r30
    15fe:	9f 1f       	adc	r25, r31
    1600:	08 95       	ret

00001602 <strchr>:
    1602:	fc 01       	movw	r30, r24
    1604:	81 91       	ld	r24, Z+
    1606:	86 17       	cp	r24, r22
    1608:	21 f0       	breq	.+8      	; 0x1612 <strchr+0x10>
    160a:	88 23       	and	r24, r24
    160c:	d9 f7       	brne	.-10     	; 0x1604 <strchr+0x2>
    160e:	99 27       	eor	r25, r25
    1610:	08 95       	ret
    1612:	31 97       	sbiw	r30, 0x01	; 1
    1614:	cf 01       	movw	r24, r30
    1616:	08 95       	ret

00001618 <strnlen>:
    1618:	fc 01       	movw	r30, r24
    161a:	61 50       	subi	r22, 0x01	; 1
    161c:	70 40       	sbci	r23, 0x00	; 0
    161e:	01 90       	ld	r0, Z+
    1620:	01 10       	cpse	r0, r1
    1622:	d8 f7       	brcc	.-10     	; 0x161a <strnlen+0x2>
    1624:	80 95       	com	r24
    1626:	90 95       	com	r25
    1628:	8e 0f       	add	r24, r30
    162a:	9f 1f       	adc	r25, r31
    162c:	08 95       	ret

0000162e <__mulhi_const_10>:
    162e:	7a e0       	ldi	r23, 0x0A	; 10
    1630:	97 9f       	mul	r25, r23
    1632:	90 2d       	mov	r25, r0
    1634:	87 9f       	mul	r24, r23
    1636:	80 2d       	mov	r24, r0
    1638:	91 0d       	add	r25, r1
    163a:	11 24       	eor	r1, r1
    163c:	08 95       	ret

0000163e <fputc>:
    163e:	0f 93       	push	r16
    1640:	1f 93       	push	r17
    1642:	cf 93       	push	r28
    1644:	df 93       	push	r29
    1646:	fb 01       	movw	r30, r22
    1648:	23 81       	ldd	r18, Z+3	; 0x03
    164a:	21 fd       	sbrc	r18, 1
    164c:	03 c0       	rjmp	.+6      	; 0x1654 <fputc+0x16>
    164e:	8f ef       	ldi	r24, 0xFF	; 255
    1650:	9f ef       	ldi	r25, 0xFF	; 255
    1652:	2c c0       	rjmp	.+88     	; 0x16ac <fputc+0x6e>
    1654:	22 ff       	sbrs	r18, 2
    1656:	16 c0       	rjmp	.+44     	; 0x1684 <fputc+0x46>
    1658:	46 81       	ldd	r20, Z+6	; 0x06
    165a:	57 81       	ldd	r21, Z+7	; 0x07
    165c:	24 81       	ldd	r18, Z+4	; 0x04
    165e:	35 81       	ldd	r19, Z+5	; 0x05
    1660:	42 17       	cp	r20, r18
    1662:	53 07       	cpc	r21, r19
    1664:	44 f4       	brge	.+16     	; 0x1676 <fputc+0x38>
    1666:	a0 81       	ld	r26, Z
    1668:	b1 81       	ldd	r27, Z+1	; 0x01
    166a:	9d 01       	movw	r18, r26
    166c:	2f 5f       	subi	r18, 0xFF	; 255
    166e:	3f 4f       	sbci	r19, 0xFF	; 255
    1670:	31 83       	std	Z+1, r19	; 0x01
    1672:	20 83       	st	Z, r18
    1674:	8c 93       	st	X, r24
    1676:	26 81       	ldd	r18, Z+6	; 0x06
    1678:	37 81       	ldd	r19, Z+7	; 0x07
    167a:	2f 5f       	subi	r18, 0xFF	; 255
    167c:	3f 4f       	sbci	r19, 0xFF	; 255
    167e:	37 83       	std	Z+7, r19	; 0x07
    1680:	26 83       	std	Z+6, r18	; 0x06
    1682:	14 c0       	rjmp	.+40     	; 0x16ac <fputc+0x6e>
    1684:	8b 01       	movw	r16, r22
    1686:	ec 01       	movw	r28, r24
    1688:	fb 01       	movw	r30, r22
    168a:	00 84       	ldd	r0, Z+8	; 0x08
    168c:	f1 85       	ldd	r31, Z+9	; 0x09
    168e:	e0 2d       	mov	r30, r0
    1690:	09 95       	icall
    1692:	89 2b       	or	r24, r25
    1694:	e1 f6       	brne	.-72     	; 0x164e <fputc+0x10>
    1696:	d8 01       	movw	r26, r16
    1698:	16 96       	adiw	r26, 0x06	; 6
    169a:	8d 91       	ld	r24, X+
    169c:	9c 91       	ld	r25, X
    169e:	17 97       	sbiw	r26, 0x07	; 7
    16a0:	01 96       	adiw	r24, 0x01	; 1
    16a2:	17 96       	adiw	r26, 0x07	; 7
    16a4:	9c 93       	st	X, r25
    16a6:	8e 93       	st	-X, r24
    16a8:	16 97       	sbiw	r26, 0x06	; 6
    16aa:	ce 01       	movw	r24, r28
    16ac:	df 91       	pop	r29
    16ae:	cf 91       	pop	r28
    16b0:	1f 91       	pop	r17
    16b2:	0f 91       	pop	r16
    16b4:	08 95       	ret

000016b6 <sprintf>:
    16b6:	ae e0       	ldi	r26, 0x0E	; 14
    16b8:	b0 e0       	ldi	r27, 0x00	; 0
    16ba:	e1 e6       	ldi	r30, 0x61	; 97
    16bc:	fb e0       	ldi	r31, 0x0B	; 11
    16be:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <__prologue_saves__+0x1c>
    16c2:	0d 89       	ldd	r16, Y+21	; 0x15
    16c4:	1e 89       	ldd	r17, Y+22	; 0x16
    16c6:	86 e0       	ldi	r24, 0x06	; 6
    16c8:	8c 83       	std	Y+4, r24	; 0x04
    16ca:	1a 83       	std	Y+2, r17	; 0x02
    16cc:	09 83       	std	Y+1, r16	; 0x01
    16ce:	8f ef       	ldi	r24, 0xFF	; 255
    16d0:	9f e7       	ldi	r25, 0x7F	; 127
    16d2:	9e 83       	std	Y+6, r25	; 0x06
    16d4:	8d 83       	std	Y+5, r24	; 0x05
    16d6:	ae 01       	movw	r20, r28
    16d8:	47 5e       	subi	r20, 0xE7	; 231
    16da:	5f 4f       	sbci	r21, 0xFF	; 255
    16dc:	6f 89       	ldd	r22, Y+23	; 0x17
    16de:	78 8d       	ldd	r23, Y+24	; 0x18
    16e0:	ce 01       	movw	r24, r28
    16e2:	01 96       	adiw	r24, 0x01	; 1
    16e4:	0e 94 48 06 	call	0xc90	; 0xc90 <vfprintf>
    16e8:	ef 81       	ldd	r30, Y+7	; 0x07
    16ea:	f8 85       	ldd	r31, Y+8	; 0x08
    16ec:	e0 0f       	add	r30, r16
    16ee:	f1 1f       	adc	r31, r17
    16f0:	10 82       	st	Z, r1
    16f2:	2e 96       	adiw	r28, 0x0e	; 14
    16f4:	e4 e0       	ldi	r30, 0x04	; 4
    16f6:	0c 94 ef 09 	jmp	0x13de	; 0x13de <__epilogue_restores__+0x1c>

000016fa <__ultoa_invert>:
    16fa:	fa 01       	movw	r30, r20
    16fc:	aa 27       	eor	r26, r26
    16fe:	28 30       	cpi	r18, 0x08	; 8
    1700:	51 f1       	breq	.+84     	; 0x1756 <__ultoa_invert+0x5c>
    1702:	20 31       	cpi	r18, 0x10	; 16
    1704:	81 f1       	breq	.+96     	; 0x1766 <__ultoa_invert+0x6c>
    1706:	e8 94       	clt
    1708:	6f 93       	push	r22
    170a:	6e 7f       	andi	r22, 0xFE	; 254
    170c:	6e 5f       	subi	r22, 0xFE	; 254
    170e:	7f 4f       	sbci	r23, 0xFF	; 255
    1710:	8f 4f       	sbci	r24, 0xFF	; 255
    1712:	9f 4f       	sbci	r25, 0xFF	; 255
    1714:	af 4f       	sbci	r26, 0xFF	; 255
    1716:	b1 e0       	ldi	r27, 0x01	; 1
    1718:	3e d0       	rcall	.+124    	; 0x1796 <__ultoa_invert+0x9c>
    171a:	b4 e0       	ldi	r27, 0x04	; 4
    171c:	3c d0       	rcall	.+120    	; 0x1796 <__ultoa_invert+0x9c>
    171e:	67 0f       	add	r22, r23
    1720:	78 1f       	adc	r23, r24
    1722:	89 1f       	adc	r24, r25
    1724:	9a 1f       	adc	r25, r26
    1726:	a1 1d       	adc	r26, r1
    1728:	68 0f       	add	r22, r24
    172a:	79 1f       	adc	r23, r25
    172c:	8a 1f       	adc	r24, r26
    172e:	91 1d       	adc	r25, r1
    1730:	a1 1d       	adc	r26, r1
    1732:	6a 0f       	add	r22, r26
    1734:	71 1d       	adc	r23, r1
    1736:	81 1d       	adc	r24, r1
    1738:	91 1d       	adc	r25, r1
    173a:	a1 1d       	adc	r26, r1
    173c:	20 d0       	rcall	.+64     	; 0x177e <__ultoa_invert+0x84>
    173e:	09 f4       	brne	.+2      	; 0x1742 <__ultoa_invert+0x48>
    1740:	68 94       	set
    1742:	3f 91       	pop	r19
    1744:	2a e0       	ldi	r18, 0x0A	; 10
    1746:	26 9f       	mul	r18, r22
    1748:	11 24       	eor	r1, r1
    174a:	30 19       	sub	r19, r0
    174c:	30 5d       	subi	r19, 0xD0	; 208
    174e:	31 93       	st	Z+, r19
    1750:	de f6       	brtc	.-74     	; 0x1708 <__ultoa_invert+0xe>
    1752:	cf 01       	movw	r24, r30
    1754:	08 95       	ret
    1756:	46 2f       	mov	r20, r22
    1758:	47 70       	andi	r20, 0x07	; 7
    175a:	40 5d       	subi	r20, 0xD0	; 208
    175c:	41 93       	st	Z+, r20
    175e:	b3 e0       	ldi	r27, 0x03	; 3
    1760:	0f d0       	rcall	.+30     	; 0x1780 <__ultoa_invert+0x86>
    1762:	c9 f7       	brne	.-14     	; 0x1756 <__ultoa_invert+0x5c>
    1764:	f6 cf       	rjmp	.-20     	; 0x1752 <__ultoa_invert+0x58>
    1766:	46 2f       	mov	r20, r22
    1768:	4f 70       	andi	r20, 0x0F	; 15
    176a:	40 5d       	subi	r20, 0xD0	; 208
    176c:	4a 33       	cpi	r20, 0x3A	; 58
    176e:	18 f0       	brcs	.+6      	; 0x1776 <__ultoa_invert+0x7c>
    1770:	49 5d       	subi	r20, 0xD9	; 217
    1772:	31 fd       	sbrc	r19, 1
    1774:	40 52       	subi	r20, 0x20	; 32
    1776:	41 93       	st	Z+, r20
    1778:	02 d0       	rcall	.+4      	; 0x177e <__ultoa_invert+0x84>
    177a:	a9 f7       	brne	.-22     	; 0x1766 <__ultoa_invert+0x6c>
    177c:	ea cf       	rjmp	.-44     	; 0x1752 <__ultoa_invert+0x58>
    177e:	b4 e0       	ldi	r27, 0x04	; 4
    1780:	a6 95       	lsr	r26
    1782:	97 95       	ror	r25
    1784:	87 95       	ror	r24
    1786:	77 95       	ror	r23
    1788:	67 95       	ror	r22
    178a:	ba 95       	dec	r27
    178c:	c9 f7       	brne	.-14     	; 0x1780 <__ultoa_invert+0x86>
    178e:	00 97       	sbiw	r24, 0x00	; 0
    1790:	61 05       	cpc	r22, r1
    1792:	71 05       	cpc	r23, r1
    1794:	08 95       	ret
    1796:	9b 01       	movw	r18, r22
    1798:	ac 01       	movw	r20, r24
    179a:	0a 2e       	mov	r0, r26
    179c:	06 94       	lsr	r0
    179e:	57 95       	ror	r21
    17a0:	47 95       	ror	r20
    17a2:	37 95       	ror	r19
    17a4:	27 95       	ror	r18
    17a6:	ba 95       	dec	r27
    17a8:	c9 f7       	brne	.-14     	; 0x179c <__ultoa_invert+0xa2>
    17aa:	62 0f       	add	r22, r18
    17ac:	73 1f       	adc	r23, r19
    17ae:	84 1f       	adc	r24, r20
    17b0:	95 1f       	adc	r25, r21
    17b2:	a0 1d       	adc	r26, r0
    17b4:	08 95       	ret

000017b6 <strtod>:
    17b6:	a0 e0       	ldi	r26, 0x00	; 0
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	e1 ee       	ldi	r30, 0xE1	; 225
    17bc:	fb e0       	ldi	r31, 0x0B	; 11
    17be:	0c 94 cb 09 	jmp	0x1396	; 0x1396 <__prologue_saves__+0xc>
    17c2:	ec 01       	movw	r28, r24
    17c4:	6b 01       	movw	r12, r22
    17c6:	61 15       	cp	r22, r1
    17c8:	71 05       	cpc	r23, r1
    17ca:	19 f0       	breq	.+6      	; 0x17d2 <strtod+0x1c>
    17cc:	fb 01       	movw	r30, r22
    17ce:	91 83       	std	Z+1, r25	; 0x01
    17d0:	80 83       	st	Z, r24
    17d2:	7e 01       	movw	r14, r28
    17d4:	ff ef       	ldi	r31, 0xFF	; 255
    17d6:	ef 1a       	sub	r14, r31
    17d8:	ff 0a       	sbc	r15, r31
    17da:	08 81       	ld	r16, Y
    17dc:	80 2f       	mov	r24, r16
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <isspace>
    17e4:	89 2b       	or	r24, r25
    17e6:	11 f0       	breq	.+4      	; 0x17ec <strtod+0x36>
    17e8:	e7 01       	movw	r28, r14
    17ea:	f3 cf       	rjmp	.-26     	; 0x17d2 <strtod+0x1c>
    17ec:	0d 32       	cpi	r16, 0x2D	; 45
    17ee:	39 f4       	brne	.+14     	; 0x17fe <strtod+0x48>
    17f0:	7e 01       	movw	r14, r28
    17f2:	82 e0       	ldi	r24, 0x02	; 2
    17f4:	e8 0e       	add	r14, r24
    17f6:	f1 1c       	adc	r15, r1
    17f8:	09 81       	ldd	r16, Y+1	; 0x01
    17fa:	11 e0       	ldi	r17, 0x01	; 1
    17fc:	08 c0       	rjmp	.+16     	; 0x180e <strtod+0x58>
    17fe:	0b 32       	cpi	r16, 0x2B	; 43
    1800:	29 f4       	brne	.+10     	; 0x180c <strtod+0x56>
    1802:	7e 01       	movw	r14, r28
    1804:	92 e0       	ldi	r25, 0x02	; 2
    1806:	e9 0e       	add	r14, r25
    1808:	f1 1c       	adc	r15, r1
    180a:	09 81       	ldd	r16, Y+1	; 0x01
    180c:	10 e0       	ldi	r17, 0x00	; 0
    180e:	e7 01       	movw	r28, r14
    1810:	21 97       	sbiw	r28, 0x01	; 1
    1812:	43 e0       	ldi	r20, 0x03	; 3
    1814:	50 e0       	ldi	r21, 0x00	; 0
    1816:	62 e7       	ldi	r22, 0x72	; 114
    1818:	71 e0       	ldi	r23, 0x01	; 1
    181a:	ce 01       	movw	r24, r28
    181c:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <strncasecmp_P>
    1820:	89 2b       	or	r24, r25
    1822:	c1 f4       	brne	.+48     	; 0x1854 <strtod+0x9e>
    1824:	23 96       	adiw	r28, 0x03	; 3
    1826:	45 e0       	ldi	r20, 0x05	; 5
    1828:	50 e0       	ldi	r21, 0x00	; 0
    182a:	6d e6       	ldi	r22, 0x6D	; 109
    182c:	71 e0       	ldi	r23, 0x01	; 1
    182e:	ce 01       	movw	r24, r28
    1830:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <strncasecmp_P>
    1834:	89 2b       	or	r24, r25
    1836:	09 f4       	brne	.+2      	; 0x183a <strtod+0x84>
    1838:	25 96       	adiw	r28, 0x05	; 5
    183a:	c1 14       	cp	r12, r1
    183c:	d1 04       	cpc	r13, r1
    183e:	19 f0       	breq	.+6      	; 0x1846 <strtod+0x90>
    1840:	f6 01       	movw	r30, r12
    1842:	d1 83       	std	Z+1, r29	; 0x01
    1844:	c0 83       	st	Z, r28
    1846:	11 11       	cpse	r17, r1
    1848:	f6 c0       	rjmp	.+492    	; 0x1a36 <strtod+0x280>
    184a:	60 e0       	ldi	r22, 0x00	; 0
    184c:	70 e0       	ldi	r23, 0x00	; 0
    184e:	80 e8       	ldi	r24, 0x80	; 128
    1850:	9f e7       	ldi	r25, 0x7F	; 127
    1852:	fa c0       	rjmp	.+500    	; 0x1a48 <strtod+0x292>
    1854:	43 e0       	ldi	r20, 0x03	; 3
    1856:	50 e0       	ldi	r21, 0x00	; 0
    1858:	6a e6       	ldi	r22, 0x6A	; 106
    185a:	71 e0       	ldi	r23, 0x01	; 1
    185c:	ce 01       	movw	r24, r28
    185e:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <strncasecmp_P>
    1862:	89 2b       	or	r24, r25
    1864:	59 f4       	brne	.+22     	; 0x187c <strtod+0xc6>
    1866:	c1 14       	cp	r12, r1
    1868:	d1 04       	cpc	r13, r1
    186a:	09 f4       	brne	.+2      	; 0x186e <strtod+0xb8>
    186c:	e9 c0       	rjmp	.+466    	; 0x1a40 <strtod+0x28a>
    186e:	f2 e0       	ldi	r31, 0x02	; 2
    1870:	ef 0e       	add	r14, r31
    1872:	f1 1c       	adc	r15, r1
    1874:	f6 01       	movw	r30, r12
    1876:	f1 82       	std	Z+1, r15	; 0x01
    1878:	e0 82       	st	Z, r14
    187a:	e2 c0       	rjmp	.+452    	; 0x1a40 <strtod+0x28a>
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	a9 01       	movw	r20, r18
    1882:	c0 e0       	ldi	r28, 0x00	; 0
    1884:	d0 e0       	ldi	r29, 0x00	; 0
    1886:	f7 01       	movw	r30, r14
    1888:	80 ed       	ldi	r24, 0xD0	; 208
    188a:	a8 2e       	mov	r10, r24
    188c:	a0 0e       	add	r10, r16
    188e:	89 e0       	ldi	r24, 0x09	; 9
    1890:	8a 15       	cp	r24, r10
    1892:	30 f1       	brcs	.+76     	; 0x18e0 <strtod+0x12a>
    1894:	91 2f       	mov	r25, r17
    1896:	92 60       	ori	r25, 0x02	; 2
    1898:	b9 2e       	mov	r11, r25
    189a:	81 2f       	mov	r24, r17
    189c:	88 70       	andi	r24, 0x08	; 8
    189e:	12 ff       	sbrs	r17, 2
    18a0:	04 c0       	rjmp	.+8      	; 0x18aa <strtod+0xf4>
    18a2:	81 11       	cpse	r24, r1
    18a4:	24 c0       	rjmp	.+72     	; 0x18ee <strtod+0x138>
    18a6:	21 96       	adiw	r28, 0x01	; 1
    18a8:	22 c0       	rjmp	.+68     	; 0x18ee <strtod+0x138>
    18aa:	81 11       	cpse	r24, r1
    18ac:	21 97       	sbiw	r28, 0x01	; 1
    18ae:	a5 e0       	ldi	r26, 0x05	; 5
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__muluhisi3>
    18b6:	dc 01       	movw	r26, r24
    18b8:	cb 01       	movw	r24, r22
    18ba:	88 0f       	add	r24, r24
    18bc:	99 1f       	adc	r25, r25
    18be:	aa 1f       	adc	r26, r26
    18c0:	bb 1f       	adc	r27, r27
    18c2:	9c 01       	movw	r18, r24
    18c4:	ad 01       	movw	r20, r26
    18c6:	2a 0d       	add	r18, r10
    18c8:	31 1d       	adc	r19, r1
    18ca:	41 1d       	adc	r20, r1
    18cc:	51 1d       	adc	r21, r1
    18ce:	28 39       	cpi	r18, 0x98	; 152
    18d0:	89 e9       	ldi	r24, 0x99	; 153
    18d2:	38 07       	cpc	r19, r24
    18d4:	48 07       	cpc	r20, r24
    18d6:	89 e1       	ldi	r24, 0x19	; 25
    18d8:	58 07       	cpc	r21, r24
    18da:	48 f0       	brcs	.+18     	; 0x18ee <strtod+0x138>
    18dc:	16 60       	ori	r17, 0x06	; 6
    18de:	06 c0       	rjmp	.+12     	; 0x18ec <strtod+0x136>
    18e0:	9e ef       	ldi	r25, 0xFE	; 254
    18e2:	a9 12       	cpse	r10, r25
    18e4:	0a c0       	rjmp	.+20     	; 0x18fa <strtod+0x144>
    18e6:	13 fd       	sbrc	r17, 3
    18e8:	40 c0       	rjmp	.+128    	; 0x196a <strtod+0x1b4>
    18ea:	18 60       	ori	r17, 0x08	; 8
    18ec:	b1 2e       	mov	r11, r17
    18ee:	8f ef       	ldi	r24, 0xFF	; 255
    18f0:	e8 1a       	sub	r14, r24
    18f2:	f8 0a       	sbc	r15, r24
    18f4:	00 81       	ld	r16, Z
    18f6:	1b 2d       	mov	r17, r11
    18f8:	c6 cf       	rjmp	.-116    	; 0x1886 <strtod+0xd0>
    18fa:	80 2f       	mov	r24, r16
    18fc:	8f 7d       	andi	r24, 0xDF	; 223
    18fe:	85 34       	cpi	r24, 0x45	; 69
    1900:	a1 f5       	brne	.+104    	; 0x196a <strtod+0x1b4>
    1902:	80 81       	ld	r24, Z
    1904:	8d 32       	cpi	r24, 0x2D	; 45
    1906:	11 f4       	brne	.+4      	; 0x190c <strtod+0x156>
    1908:	10 61       	ori	r17, 0x10	; 16
    190a:	06 c0       	rjmp	.+12     	; 0x1918 <strtod+0x162>
    190c:	8b 32       	cpi	r24, 0x2B	; 43
    190e:	21 f0       	breq	.+8      	; 0x1918 <strtod+0x162>
    1910:	31 96       	adiw	r30, 0x01	; 1
    1912:	61 e0       	ldi	r22, 0x01	; 1
    1914:	70 e0       	ldi	r23, 0x00	; 0
    1916:	04 c0       	rjmp	.+8      	; 0x1920 <strtod+0x16a>
    1918:	81 81       	ldd	r24, Z+1	; 0x01
    191a:	32 96       	adiw	r30, 0x02	; 2
    191c:	62 e0       	ldi	r22, 0x02	; 2
    191e:	70 e0       	ldi	r23, 0x00	; 0
    1920:	80 53       	subi	r24, 0x30	; 48
    1922:	8a 30       	cpi	r24, 0x0A	; 10
    1924:	18 f0       	brcs	.+6      	; 0x192c <strtod+0x176>
    1926:	e6 1b       	sub	r30, r22
    1928:	f7 0b       	sbc	r31, r23
    192a:	1f c0       	rjmp	.+62     	; 0x196a <strtod+0x1b4>
    192c:	60 e0       	ldi	r22, 0x00	; 0
    192e:	70 e0       	ldi	r23, 0x00	; 0
    1930:	60 38       	cpi	r22, 0x80	; 128
    1932:	9c e0       	ldi	r25, 0x0C	; 12
    1934:	79 07       	cpc	r23, r25
    1936:	5c f4       	brge	.+22     	; 0x194e <strtod+0x198>
    1938:	db 01       	movw	r26, r22
    193a:	aa 0f       	add	r26, r26
    193c:	bb 1f       	adc	r27, r27
    193e:	aa 0f       	add	r26, r26
    1940:	bb 1f       	adc	r27, r27
    1942:	6a 0f       	add	r22, r26
    1944:	7b 1f       	adc	r23, r27
    1946:	66 0f       	add	r22, r22
    1948:	77 1f       	adc	r23, r23
    194a:	68 0f       	add	r22, r24
    194c:	71 1d       	adc	r23, r1
    194e:	31 96       	adiw	r30, 0x01	; 1
    1950:	df 01       	movw	r26, r30
    1952:	11 97       	sbiw	r26, 0x01	; 1
    1954:	8c 91       	ld	r24, X
    1956:	80 53       	subi	r24, 0x30	; 48
    1958:	8a 30       	cpi	r24, 0x0A	; 10
    195a:	50 f3       	brcs	.-44     	; 0x1930 <strtod+0x17a>
    195c:	14 ff       	sbrs	r17, 4
    195e:	03 c0       	rjmp	.+6      	; 0x1966 <strtod+0x1b0>
    1960:	71 95       	neg	r23
    1962:	61 95       	neg	r22
    1964:	71 09       	sbc	r23, r1
    1966:	c6 0f       	add	r28, r22
    1968:	d7 1f       	adc	r29, r23
    196a:	11 ff       	sbrs	r17, 1
    196c:	08 c0       	rjmp	.+16     	; 0x197e <strtod+0x1c8>
    196e:	c1 14       	cp	r12, r1
    1970:	d1 04       	cpc	r13, r1
    1972:	29 f0       	breq	.+10     	; 0x197e <strtod+0x1c8>
    1974:	cf 01       	movw	r24, r30
    1976:	01 97       	sbiw	r24, 0x01	; 1
    1978:	f6 01       	movw	r30, r12
    197a:	91 83       	std	Z+1, r25	; 0x01
    197c:	80 83       	st	Z, r24
    197e:	ca 01       	movw	r24, r20
    1980:	b9 01       	movw	r22, r18
    1982:	0e 94 24 05 	call	0xa48	; 0xa48 <__floatunsisf>
    1986:	21 2f       	mov	r18, r17
    1988:	23 70       	andi	r18, 0x03	; 3
    198a:	23 30       	cpi	r18, 0x03	; 3
    198c:	19 f0       	breq	.+6      	; 0x1994 <strtod+0x1de>
    198e:	4b 01       	movw	r8, r22
    1990:	5c 01       	movw	r10, r24
    1992:	06 c0       	rjmp	.+12     	; 0x19a0 <strtod+0x1ea>
    1994:	4b 01       	movw	r8, r22
    1996:	5c 01       	movw	r10, r24
    1998:	b7 fa       	bst	r11, 7
    199a:	b0 94       	com	r11
    199c:	b7 f8       	bld	r11, 7
    199e:	b0 94       	com	r11
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	a9 01       	movw	r20, r18
    19a6:	c5 01       	movw	r24, r10
    19a8:	b4 01       	movw	r22, r8
    19aa:	0e 94 77 04 	call	0x8ee	; 0x8ee <__cmpsf2>
    19ae:	88 23       	and	r24, r24
    19b0:	09 f4       	brne	.+2      	; 0x19b4 <strtod+0x1fe>
    19b2:	3e c0       	rjmp	.+124    	; 0x1a30 <strtod+0x27a>
    19b4:	d7 ff       	sbrs	r29, 7
    19b6:	06 c0       	rjmp	.+12     	; 0x19c4 <strtod+0x20e>
    19b8:	d1 95       	neg	r29
    19ba:	c1 95       	neg	r28
    19bc:	d1 09       	sbc	r29, r1
    19be:	09 e8       	ldi	r16, 0x89	; 137
    19c0:	11 e0       	ldi	r17, 0x01	; 1
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <strtod+0x212>
    19c4:	01 ea       	ldi	r16, 0xA1	; 161
    19c6:	11 e0       	ldi	r17, 0x01	; 1
    19c8:	68 01       	movw	r12, r16
    19ca:	f8 e1       	ldi	r31, 0x18	; 24
    19cc:	cf 1a       	sub	r12, r31
    19ce:	d1 08       	sbc	r13, r1
    19d0:	90 e2       	ldi	r25, 0x20	; 32
    19d2:	e9 2e       	mov	r14, r25
    19d4:	f1 2c       	mov	r15, r1
    19d6:	ce 15       	cp	r28, r14
    19d8:	df 05       	cpc	r29, r15
    19da:	74 f0       	brlt	.+28     	; 0x19f8 <strtod+0x242>
    19dc:	f8 01       	movw	r30, r16
    19de:	25 91       	lpm	r18, Z+
    19e0:	35 91       	lpm	r19, Z+
    19e2:	45 91       	lpm	r20, Z+
    19e4:	54 91       	lpm	r21, Z
    19e6:	c5 01       	movw	r24, r10
    19e8:	b4 01       	movw	r22, r8
    19ea:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__mulsf3>
    19ee:	4b 01       	movw	r8, r22
    19f0:	5c 01       	movw	r10, r24
    19f2:	ce 19       	sub	r28, r14
    19f4:	df 09       	sbc	r29, r15
    19f6:	ef cf       	rjmp	.-34     	; 0x19d6 <strtod+0x220>
    19f8:	04 50       	subi	r16, 0x04	; 4
    19fa:	11 09       	sbc	r17, r1
    19fc:	f5 94       	asr	r15
    19fe:	e7 94       	ror	r14
    1a00:	0c 15       	cp	r16, r12
    1a02:	1d 05       	cpc	r17, r13
    1a04:	41 f7       	brne	.-48     	; 0x19d6 <strtod+0x220>
    1a06:	8a 2d       	mov	r24, r10
    1a08:	88 0f       	add	r24, r24
    1a0a:	8b 2d       	mov	r24, r11
    1a0c:	88 1f       	adc	r24, r24
    1a0e:	8f 3f       	cpi	r24, 0xFF	; 255
    1a10:	49 f0       	breq	.+18     	; 0x1a24 <strtod+0x26e>
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	a9 01       	movw	r20, r18
    1a18:	c5 01       	movw	r24, r10
    1a1a:	b4 01       	movw	r22, r8
    1a1c:	0e 94 77 04 	call	0x8ee	; 0x8ee <__cmpsf2>
    1a20:	81 11       	cpse	r24, r1
    1a22:	06 c0       	rjmp	.+12     	; 0x1a30 <strtod+0x27a>
    1a24:	82 e2       	ldi	r24, 0x22	; 34
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <__data_end+0x1>
    1a2c:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <__data_end>
    1a30:	c5 01       	movw	r24, r10
    1a32:	b4 01       	movw	r22, r8
    1a34:	09 c0       	rjmp	.+18     	; 0x1a48 <strtod+0x292>
    1a36:	60 e0       	ldi	r22, 0x00	; 0
    1a38:	70 e0       	ldi	r23, 0x00	; 0
    1a3a:	80 e8       	ldi	r24, 0x80	; 128
    1a3c:	9f ef       	ldi	r25, 0xFF	; 255
    1a3e:	04 c0       	rjmp	.+8      	; 0x1a48 <strtod+0x292>
    1a40:	60 e0       	ldi	r22, 0x00	; 0
    1a42:	70 e0       	ldi	r23, 0x00	; 0
    1a44:	80 ec       	ldi	r24, 0xC0	; 192
    1a46:	9f e7       	ldi	r25, 0x7F	; 127
    1a48:	cd b7       	in	r28, 0x3d	; 61
    1a4a:	de b7       	in	r29, 0x3e	; 62
    1a4c:	ec e0       	ldi	r30, 0x0C	; 12
    1a4e:	0c 94 e7 09 	jmp	0x13ce	; 0x13ce <__epilogue_restores__+0xc>

00001a52 <isspace>:
    1a52:	91 11       	cpse	r25, r1
    1a54:	0c 94 4a 0d 	jmp	0x1a94	; 0x1a94 <__ctype_isfalse>
    1a58:	80 32       	cpi	r24, 0x20	; 32
    1a5a:	19 f0       	breq	.+6      	; 0x1a62 <isspace+0x10>
    1a5c:	89 50       	subi	r24, 0x09	; 9
    1a5e:	85 50       	subi	r24, 0x05	; 5
    1a60:	c8 f7       	brcc	.-14     	; 0x1a54 <isspace+0x2>
    1a62:	08 95       	ret

00001a64 <strncasecmp_P>:
    1a64:	fb 01       	movw	r30, r22
    1a66:	dc 01       	movw	r26, r24
    1a68:	41 50       	subi	r20, 0x01	; 1
    1a6a:	50 40       	sbci	r21, 0x00	; 0
    1a6c:	88 f0       	brcs	.+34     	; 0x1a90 <strncasecmp_P+0x2c>
    1a6e:	8d 91       	ld	r24, X+
    1a70:	81 34       	cpi	r24, 0x41	; 65
    1a72:	1c f0       	brlt	.+6      	; 0x1a7a <strncasecmp_P+0x16>
    1a74:	8b 35       	cpi	r24, 0x5B	; 91
    1a76:	0c f4       	brge	.+2      	; 0x1a7a <strncasecmp_P+0x16>
    1a78:	80 5e       	subi	r24, 0xE0	; 224
    1a7a:	65 91       	lpm	r22, Z+
    1a7c:	61 34       	cpi	r22, 0x41	; 65
    1a7e:	1c f0       	brlt	.+6      	; 0x1a86 <strncasecmp_P+0x22>
    1a80:	6b 35       	cpi	r22, 0x5B	; 91
    1a82:	0c f4       	brge	.+2      	; 0x1a86 <strncasecmp_P+0x22>
    1a84:	60 5e       	subi	r22, 0xE0	; 224
    1a86:	86 1b       	sub	r24, r22
    1a88:	61 11       	cpse	r22, r1
    1a8a:	71 f3       	breq	.-36     	; 0x1a68 <strncasecmp_P+0x4>
    1a8c:	99 0b       	sbc	r25, r25
    1a8e:	08 95       	ret
    1a90:	88 1b       	sub	r24, r24
    1a92:	fc cf       	rjmp	.-8      	; 0x1a8c <strncasecmp_P+0x28>

00001a94 <__ctype_isfalse>:
    1a94:	99 27       	eor	r25, r25
    1a96:	88 27       	eor	r24, r24

00001a98 <__ctype_istrue>:
    1a98:	08 95       	ret

00001a9a <__muluhisi3>:
    1a9a:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__umulhisi3>
    1a9e:	a5 9f       	mul	r26, r21
    1aa0:	90 0d       	add	r25, r0
    1aa2:	b4 9f       	mul	r27, r20
    1aa4:	90 0d       	add	r25, r0
    1aa6:	a4 9f       	mul	r26, r20
    1aa8:	80 0d       	add	r24, r0
    1aaa:	91 1d       	adc	r25, r1
    1aac:	11 24       	eor	r1, r1
    1aae:	08 95       	ret

00001ab0 <__umulhisi3>:
    1ab0:	a2 9f       	mul	r26, r18
    1ab2:	b0 01       	movw	r22, r0
    1ab4:	b3 9f       	mul	r27, r19
    1ab6:	c0 01       	movw	r24, r0
    1ab8:	a3 9f       	mul	r26, r19
    1aba:	70 0d       	add	r23, r0
    1abc:	81 1d       	adc	r24, r1
    1abe:	11 24       	eor	r1, r1
    1ac0:	91 1d       	adc	r25, r1
    1ac2:	b2 9f       	mul	r27, r18
    1ac4:	70 0d       	add	r23, r0
    1ac6:	81 1d       	adc	r24, r1
    1ac8:	11 24       	eor	r1, r1
    1aca:	91 1d       	adc	r25, r1
    1acc:	08 95       	ret

00001ace <_exit>:
    1ace:	f8 94       	cli

00001ad0 <__stop_program>:
    1ad0:	ff cf       	rjmp	.-2      	; 0x1ad0 <__stop_program>
